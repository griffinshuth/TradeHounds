diff --git a/node_modules/expo-image-picker/CHANGELOG.md b/node_modules/expo-image-picker/CHANGELOG.md
index b4655dc..3de1bcf 100644
--- a/node_modules/expo-image-picker/CHANGELOG.md
+++ b/node_modules/expo-image-picker/CHANGELOG.md
@@ -10,6 +10,144 @@
 
 ### üí° Others
 
+## 14.7.1 ‚Äî 2023-12-19
+
+_This version does not introduce any user-facing changes._
+
+## 14.7.0 ‚Äî 2023-11-14
+
+### üõ† Breaking changes
+
+- Bumped iOS deployment target to 13.4. ([#25063](https://github.com/expo/expo/pull/25063) by [@gabrieldonadel](https://github.com/gabrieldonadel))
+- On `Android` bump `compileSdkVersion` and `targetSdkVersion` to `34`. ([#24708](https://github.com/expo/expo/pull/24708) by [@alanjhughes](https://github.com/alanjhughes))
+
+## 14.6.0 ‚Äî 2023-10-17
+
+### üõ† Breaking changes
+
+- Dropped support for Android SDK 21 and 22. ([#24201](https://github.com/expo/expo/pull/24201) by [@behenate](https://github.com/behenate))
+
+### üéâ New features
+
+- On Android, support `fileName` and `filesize` in the returned assets. ([#24524](https://github.com/expo/expo/pull/24524) by [@alanjhughes](https://github.com/alanjhughes))
+- Support returning the mime type of the returned assets. ([#24659](https://github.com/expo/expo/pull/24659) by [@alanjhughes](https://github.com/alanjhughes))
+
+## 14.5.0 ‚Äî 2023-09-04
+
+### üéâ New features
+
+- Added support for React Native 0.73. ([#24018](https://github.com/expo/expo/pull/24018) by [@kudo](https://github.com/kudo))
+
+### üêõ Bug fixes
+
+- On Android, the `Uri` type is not serializable and causes a crash when recreating the activity. ([#23768](https://github.com/expo/expo/pull/23768) by [@alanjhughes](https://github.com/alanjhughes))
+
+### üí° Others
+
+- Remove deprecation warnings on `ImagePickerResult`. ([#24226](https://github.com/expo/expo/pull/24226) by [@alanjhughes](https://github.com/alanjhughes))
+
+## 14.4.1 ‚Äî 2023-08-02
+
+_This version does not introduce any user-facing changes._
+
+## 14.4.0 ‚Äî 2023-07-28
+
+_This version does not introduce any user-facing changes._
+
+## 14.3.2 - 2023-07-23
+
+### üí° Others
+
+- On Android, restore behavior from [#22658](https://github.com/expo/expo/pull/22658). ([#23617](https://github.com/expo/expo/pull/23617) by [@alanhughes](https://github.com/alanjhughes)) ([#22658](https://github.com/expo/expo/pull/22658), [#23617](https://github.com/expo/expo/pull/23617) by [@alanjhughes](https://github.com/alanjhughes))
+
+## 14.3.1 - 2023-07-04
+
+### üêõ Bug fixes
+
+- Fix manifest merger build fail on Android. ([#23191](https://github.com/expo/expo/pull/23191) by [@alexandrius](https://github.com/alexandrius))
+- [Android] Fix backported photo picker crashing with null intent. ([#23224](https://github.com/expo/expo/pull/23224) by [@thespacemanatee](https://github.com/thespacemanatee))
+
+## 14.3.0 ‚Äî 2023-06-13
+
+### üéâ New features
+
+- Added ability to choose the preferred asset representation mode on iOS 14+. ([#22456](https://github.com/expo/expo/pull/22456) by [@thespacemanatee](https://github.com/thespacemanatee))
+- Updated the Android image picker to use a [more streamlined and modern interface](https://developer.android.com/training/data-storage/shared/photopicker), closely resembling the one on iOS. [#22658](https://github.com/expo/expo/pull/22658) by [@fobos531](https://github.com/fobos531)
+
+### üêõ Bug fixes
+
+- Fixed Android build warnings for Gradle version 8. ([#22537](https://github.com/expo/expo/pull/22537), [#22609](https://github.com/expo/expo/pull/22609) by [@kudo](https://github.com/kudo))
+- Fixed an issue that allowed picking non-image/video files when passing `MediaTypeOptions.All` ([#22606](https://github.com/expo/expo/pull/22606) by [@fobos531](https://github.com/fobos531))
+
+## 14.2.0 ‚Äî 2023-05-08
+
+### üéâ New features
+
+- Added ability to choose the camera-facing type. ([#22143](https://github.com/expo/expo/pull/22143) by [@YoussefHenna](https://github.com/YoussefHenna))
+
+### üêõ Bug fixes
+
+- Fix images unexpectedly being converted to `.png` when opening `.bmp` files and selecting any quality in `ImagePickerOptions`. ([#21361](https://github.com/expo/expo/pull/21361) by [@behenate](https://github.com/behenate))
+- Fix issue where the array of permissions could end up empty causing an exception. ([#21589](https://github.com/expo/expo/pull/21589) by [@alanhughes](https://github.com/alanjhughes))
+- Fix rotated videos returning incorrect width/height. [#12573](https://github.com/expo/expo/issues/12573) ([#21758](https://github.com/expo/expo/pull/21758) by [@mmmulani](https://github.com/mmmulani))
+- Fix NullPointerException for launchCameraAsync on Android 13. ([#22123](https://github.com/expo/expo/pull/22123) by [@witheroux](https://github.com/witheroux))
+- [Android] Fix image picker returning inverted dimensions when selecting vertical images without editing. ([#22383](https://github.com/expo/expo/pull/22383) by [@behenate](https://github.com/behenate))
+
+## 14.1.1 ‚Äî 2023-02-09
+
+### ‚ö†Ô∏è Notices
+
+- Removed deprecated fields from pick result type and deprecated `UIImagePickerPresentationStyle` enum values. ([#21078](https://github.com/expo/expo/pull/21078) by [@Simek](https://github.com/Simek))
+
+## 14.1.0 ‚Äî 2023-01-26
+
+### üéâ New features
+
+- Add support for [granular permissions](https://developer.android.com/about/versions/13/behavior-changes-13) on Android 13. ([#20908](https://github.com/expo/expo/pull/20908) by [@alanhughes](https://github.com/alanjhughes))
+
+### üí° Others
+
+- On Android bump `compileSdkVersion` and `targetSdkVersion` to `33`. ([#20721](https://github.com/expo/expo/pull/20721) by [@lukmccall](https://github.com/lukmccall))
+
+## 14.0.3 ‚Äî 2022-12-30
+
+### üí° Others
+
+- Avoid dependency on `uuid`. ([#20476](https://github.com/expo/expo/pull/20476) by [@LinusU](https://github.com/LinusU))
+
+## 14.0.2 - 2022-11-21
+
+### üêõ Bug fixes
+
+- Fix support for animated GIFs on iOS. ([#20034](https://github.com/expo/expo/pull/20034) by [@barthap](https://github.com/barthap))
+
+## 14.0.1 - 2022-11-08
+
+### üêõ Bug fixes
+
+- Fix incorrect asset type for videos on iOS. ([#19932](https://github.com/expo/expo/pull/19932) by [@tsapeta](https://github.com/tsapeta))
+
+## 14.0.0 ‚Äî 2022-10-25
+
+### üõ† Breaking changes
+
+- Remove deprecated `requestCameraRollPermissionsAsync` and `getCameraRollPermissionsAsync` methods, as well as associated to them `CameraRollPermissionResponse` type. ([#18600](https://github.com/expo/expo/pull/18600) by [@Simek](https://github.com/Simek))
+- Bumped iOS deployment target to 13.0 and deprecated support for iOS 12. ([#18873](https://github.com/expo/expo/pull/18873) by [@tsapeta](https://github.com/tsapeta))
+- Reworked the picking result object for simplicity and better compatibility with the multiple selection. ([#19570](https://github.com/expo/expo/pull/19570) by [@tsapeta](https://github.com/tsapeta))
+
+### üéâ New features
+
+- The new `PHPickerViewController` is now default picker interface on iOS 14+. ([#18871](https://github.com/expo/expo/pull/18871) by [@barthap](https://github.com/barthap))
+
+### üêõ Bug fixes
+
+- Fix images taken with `launchCameraAsync` being translated incorrectly on some camera orientations. ([#19185](https://github.com/expo/expo/pull/19185) by [@jacobjaffe](https://github.com/JacobJaffe) and [@reececox](https://github.com/reececox))
+- Fix error where `launchImageLibraryAsync()` saved the photo to a global cache directory that was inaccessible in Expo Go. ([#19205](https://github.com/expo/expo/pull/19205) by [@aleqsio](https://github.com/aleqsio))
+
+### üí° Others
+
+- Drop `@expo/config-plugins` dependency in favor of peer dependency on `expo`. ([#18595](https://github.com/expo/expo/pull/18595) by [@EvanBacon](https://github.com/EvanBacon))
+
 ## 13.3.1 ‚Äî 2022-07-25
 
 _This version does not introduce any user-facing changes._
diff --git a/node_modules/expo-image-picker/README.md b/node_modules/expo-image-picker/README.md
index c16413a..23e1390 100644
--- a/node_modules/expo-image-picker/README.md
+++ b/node_modules/expo-image-picker/README.md
@@ -1,15 +1,22 @@
-# expo-image-picker
+<p>
+  <a href="https://docs.expo.dev/versions/latest/sdk/imagepicker/">
+    <img
+      src="../../.github/resources/expo-image-picker.svg"
+      alt="expo-image-picker"
+      height="64" />
+  </a>
+</p>
 
 Provides access to the system's UI for selecting images and videos from the phone's library or taking a photo with the camera.
 
 # API documentation
 
-- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/imagepicker.md)
+- [Documentation for the main branch](https://github.com/expo/expo/blob/main/docs/pages/versions/unversioned/sdk/imagepicker.mdx)
 - [Documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/imagepicker/)
 
 # Installation in managed Expo projects
 
-For [managed](https://docs.expo.dev/versions/latest/introduction/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/imagepicker/).
+For [managed](https://docs.expo.dev/archive/managed-vs-bare/) Expo projects, please follow the installation instructions in the [API documentation for the latest stable release](https://docs.expo.dev/versions/latest/sdk/imagepicker/).
 
 # Installation in bare React Native projects
 
@@ -18,7 +25,7 @@ For bare React Native projects, you must ensure that you have [installed and con
 ### Add the package to your npm dependencies
 
 ```
-expo install expo-image-picker
+npx expo install expo-image-picker
 ```
 
 ### Configure for iOS
@@ -55,7 +62,7 @@ This package automatically adds the `CAMERA`, `READ_EXTERNAL_STORAGE`, and `WRIT
 
 > This plugin is applied automatically in EAS Build, only add the config plugin if you want to pass in extra properties.
 
-After installing this npm package, add the [config plugin](https://docs.expo.io/guides/config-plugins/) to the [`plugins`](https://docs.expo.io/versions/latest/config/app/#plugins) array of your `app.json` or `app.config.js`:
+After installing this npm package, add the [config plugin](https://docs.expo.dev/config-plugins/introduction) to the [`plugins`](https://docs.expo.io/versions/latest/config/app/#plugins) array of your `app.json` or `app.config.js`:
 
 ```json
 {
@@ -65,7 +72,7 @@ After installing this npm package, add the [config plugin](https://docs.expo.io/
 }
 ```
 
-Next, rebuild your app as described in the ["Adding custom native code"](https://docs.expo.io/workflow/customizing/) guide.
+Next, rebuild your app as described in the ["Adding custom native code"](https://docs.expo.dev/workflow/customizing/) guide.
 
 ### API
 
diff --git a/node_modules/expo-image-picker/android/build.gradle b/node_modules/expo-image-picker/android/build.gradle
index b29f427..f8d0547 100644
--- a/node_modules/expo-image-picker/android/build.gradle
+++ b/node_modules/expo-image-picker/android/build.gradle
@@ -3,15 +3,20 @@ apply plugin: 'kotlin-android'
 apply plugin: 'maven-publish'
 
 group = 'host.exp.exponent'
-version = '13.3.1'
+version = '14.7.1'
 
-buildscript {
-  def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
-  if (expoModulesCorePlugin.exists()) {
-    apply from: expoModulesCorePlugin
-    applyKotlinExpoModulesCorePlugin()
+def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
+if (expoModulesCorePlugin.exists()) {
+  apply from: expoModulesCorePlugin
+  applyKotlinExpoModulesCorePlugin()
+  // Remove this check, but keep the contents after SDK49 support is dropped
+  if (safeExtGet("expoProvidesDefaultConfig", false)) {
+    useExpoPublishing()
+    useCoreDependencies()
   }
+}
 
+buildscript {
   // Simple helper that allows the root project to override versions declared by this library.
   ext.safeExtGet = { prop, fallback ->
     rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
@@ -22,7 +27,7 @@ buildscript {
     if (ext.has("kotlinVersion")) {
       ext.kotlinVersion()
     } else {
-      ext.safeExtGet("kotlinVersion", "1.6.10")
+      ext.safeExtGet("kotlinVersion", "1.8.10")
     }
   }
 
@@ -35,60 +40,75 @@ buildscript {
   }
 }
 
-// Creating sources with comments
-task androidSourcesJar(type: Jar) {
-  classifier = 'sources'
-  from android.sourceSets.main.java.srcDirs
-}
-
-afterEvaluate {
-  publishing {
-    publications {
-      release(MavenPublication) {
-        from components.release
-        // Add additional sourcesJar to artifacts
-        artifact(androidSourcesJar)
+// Remove this if and it's contents, when support for SDK49 is dropped
+if (!safeExtGet("expoProvidesDefaultConfig", false)) {
+  afterEvaluate {
+    publishing {
+      publications {
+        release(MavenPublication) {
+          from components.release
+        }
       }
-    }
-    repositories {
-      maven {
-        url = mavenLocal().url
+      repositories {
+        maven {
+          url = mavenLocal().url
+        }
       }
     }
   }
 }
 
 android {
-  compileSdkVersion safeExtGet("compileSdkVersion", 31)
+  // Remove this if and it's contents, when support for SDK49 is dropped
+  if (!safeExtGet("expoProvidesDefaultConfig", false)) {
+    compileSdkVersion safeExtGet("compileSdkVersion", 34)
+
+    defaultConfig {
+      minSdkVersion safeExtGet("minSdkVersion", 23)
+      targetSdkVersion safeExtGet("targetSdkVersion", 34)
+    }
 
-  compileOptions {
-    sourceCompatibility JavaVersion.VERSION_11
-    targetCompatibility JavaVersion.VERSION_11
+    publishing {
+      singleVariant("release") {
+        withSourcesJar()
+      }
+    }
+
+    lintOptions {
+      abortOnError false
+    }
   }
 
-  kotlinOptions {
-    jvmTarget = JavaVersion.VERSION_11.majorVersion
+  def agpVersion = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION
+  if (agpVersion.tokenize('.')[0].toInteger() < 8) {
+    compileOptions {
+      sourceCompatibility JavaVersion.VERSION_11
+      targetCompatibility JavaVersion.VERSION_11
+    }
+
+    kotlinOptions {
+      jvmTarget = JavaVersion.VERSION_11.majorVersion
+    }
   }
 
+  namespace "expo.modules.imagepicker"
   defaultConfig {
-    minSdkVersion safeExtGet("minSdkVersion", 21)
-    targetSdkVersion safeExtGet("targetSdkVersion", 31)
     versionCode 22
-    versionName "13.3.1"
-  }
-  lintOptions {
-    abortOnError false
+    versionName "14.7.1"
   }
 }
 
 dependencies {
-  implementation project(':expo-modules-core')
+  // Remove this if and it's contents, when support for SDK49 is dropped
+  if (!safeExtGet("expoProvidesDefaultConfig", false)) {
+    implementation project(':expo-modules-core')
+    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}"
+  }
 
-  implementation "androidx.activity:activity-ktx:1.4.0"
-  implementation "androidx.appcompat:appcompat:1.4.2"
+  implementation "androidx.activity:activity-ktx:1.7.2"
+  implementation "androidx.appcompat:appcompat:1.6.1"
   implementation "androidx.exifinterface:exifinterface:1.3.3"
-  implementation "com.github.CanHub:Android-Image-Cropper:4.3.0"
-  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}"
+  implementation "com.github.CanHub:Android-Image-Cropper:4.3.1"
   implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.3"
   implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.3"
 }
diff --git a/node_modules/expo-image-picker/android/src/main/AndroidManifest.xml b/node_modules/expo-image-picker/android/src/main/AndroidManifest.xml
index 9bdd59d..9ea2a9d 100644
--- a/node_modules/expo-image-picker/android/src/main/AndroidManifest.xml
+++ b/node_modules/expo-image-picker/android/src/main/AndroidManifest.xml
@@ -1,37 +1,51 @@
-<manifest package="expo.modules.imagepicker"
-          xmlns:android="http://schemas.android.com/apk/res/android"
-    >
-    <!-- Required for picking images from camera directly -->
-    <uses-permission android:name="android.permission.CAMERA"/>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+  xmlns:tools="http://schemas.android.com/tools">
+  <!-- Required for picking images from camera directly -->
+  <uses-permission android:name="android.permission.CAMERA" />
 
-    <!-- Required for picking images from camera roll -->
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
-    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
+  <!-- Required for picking images from camera roll -->
+  <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
+  <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+  <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
+  <uses-permission android:name="android.permission.READ_MEDIA_VIDEO" />
 
-    <application>
-      <activity
-        android:name="com.canhub.cropper.CropImageActivity"
-        android:theme="@style/Base.Theme.AppCompat"/>
-      <!-- https://developer.android.com/guide/topics/manifest/provider-element.html -->
-        <provider
-            android:name=".fileprovider.ImagePickerFileProvider"
-            android:authorities="${applicationId}.ImagePickerFileProvider"
-            android:exported="false"
-            android:grantUriPermissions="true">
-            <meta-data
-                android:name="android.support.FILE_PROVIDER_PATHS"
-                android:resource="@xml/image_picker_provider_paths"/>
-        </provider>
-    </application>
+  <application>
+    <service
+      android:name="com.google.android.gms.metadata.ModuleDependencies"
+      android:enabled="false"
+      android:exported="false"
+      tools:ignore="MissingClass">
+      <intent-filter>
+        <action android:name="com.google.android.gms.metadata.MODULE_DEPENDENCIES" />
+      </intent-filter>
+      <meta-data
+        android:name="photopicker_activity:0:required"
+        android:value="" />
+    </service>
 
-    <queries>
-        <intent>
-            <!-- Required for picking images from the camera roll if targeting API 30 -->
-            <action android:name="android.media.action.IMAGE_CAPTURE" />
-        </intent>
-        <intent>
-            <!-- Required for picking images from the camera if targeting API 30 -->
-            <action android:name="android.media.action.ACTION_VIDEO_CAPTURE" />
-        </intent>
-    </queries>
+    <activity
+      android:name="com.canhub.cropper.CropImageActivity"
+      android:theme="@style/Base.Theme.AppCompat" />
+    <!-- https://developer.android.com/guide/topics/manifest/provider-element.html -->
+    <provider
+      android:name=".fileprovider.ImagePickerFileProvider"
+      android:authorities="${applicationId}.ImagePickerFileProvider"
+      android:exported="false"
+      android:grantUriPermissions="true">
+      <meta-data
+        android:name="android.support.FILE_PROVIDER_PATHS"
+        android:resource="@xml/image_picker_provider_paths" />
+    </provider>
+  </application>
+
+  <queries>
+    <intent>
+      <!-- Required for picking images from the camera roll if targeting API 30 -->
+      <action android:name="android.media.action.IMAGE_CAPTURE" />
+    </intent>
+    <intent>
+      <!-- Required for picking images from the camera if targeting API 30 -->
+      <action android:name="android.media.action.ACTION_VIDEO_CAPTURE" />
+    </intent>
+  </queries>
 </manifest>
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerConstants.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerConstants.kt
index 7e8bb96..cd6d77e 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerConstants.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerConstants.kt
@@ -66,7 +66,7 @@ object ImagePickerConstants {
         ExifInterface.TAG_SUBSEC_TIME,
         ExifInterface.TAG_SUBSEC_TIME_DIGITIZED,
         ExifInterface.TAG_SUBSEC_TIME_ORIGINAL,
-        ExifInterface.TAG_USER_COMMENT,
+        ExifInterface.TAG_USER_COMMENT
       ),
       "double" to listOf(
         ExifInterface.TAG_APERTURE_VALUE,
@@ -100,7 +100,7 @@ object ImagePickerConstants {
         ExifInterface.TAG_WHITE_POINT,
         ExifInterface.TAG_X_RESOLUTION,
         ExifInterface.TAG_Y_CB_CR_COEFFICIENTS,
-        ExifInterface.TAG_Y_RESOLUTION,
+        ExifInterface.TAG_Y_RESOLUTION
       ),
       "int" to listOf(
         ExifInterface.TAG_BITS_PER_SAMPLE,
@@ -157,7 +157,7 @@ object ImagePickerConstants {
         ExifInterface.TAG_TRANSFER_FUNCTION,
         ExifInterface.TAG_WHITE_BALANCE,
         ExifInterface.TAG_Y_CB_CR_POSITIONING,
-        ExifInterface.TAG_Y_CB_CR_SUB_SAMPLING,
+        ExifInterface.TAG_Y_CB_CR_SUB_SAMPLING
       )
     )
   }
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerExceptions.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerExceptions.kt
index 2bd5aac..0a76a54 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerExceptions.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerExceptions.kt
@@ -10,6 +10,9 @@ internal class FailedToDeduceTypeException :
 internal class FailedToCreateFileException(path: String, cause: Throwable? = null) :
   CodedException("Failed to create the file '$path'", cause)
 
+internal class FailedToPickMediaException :
+  CodedException("Failed to parse PhotoPicker result")
+
 internal class FailedToExtractVideoMetadataException(file: File? = null, cause: Throwable? = null) :
   CodedException("Failed to extract metadata from video file '${file?.toUri()?.toString() ?: ""}'", cause)
 
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerModule.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerModule.kt
index 7a28702..3f50f8c 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerModule.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerModule.kt
@@ -1,11 +1,14 @@
 package expo.modules.imagepicker
 
 import android.Manifest
+import android.Manifest.permission.READ_MEDIA_IMAGES
+import android.Manifest.permission.READ_MEDIA_VIDEO
 import android.content.Context
 import android.content.Intent
 import android.net.Uri
-import expo.modules.core.errors.ModuleNotFoundException
+import android.os.Build
 import android.os.OperationCanceledException
+import expo.modules.core.errors.ModuleNotFoundException
 import expo.modules.imagepicker.contracts.CameraContract
 import expo.modules.imagepicker.contracts.CameraContractOptions
 import expo.modules.imagepicker.contracts.CropImageContract
@@ -21,9 +24,9 @@ import expo.modules.kotlin.functions.Coroutine
 import expo.modules.kotlin.modules.Module
 import expo.modules.kotlin.modules.ModuleDefinition
 import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.launch
 import kotlinx.coroutines.suspendCancellableCoroutine
 import kotlinx.coroutines.withContext
+import java.io.File
 import kotlin.coroutines.resume
 import kotlin.coroutines.resumeWithException
 
@@ -33,7 +36,6 @@ private const val moduleName = "ExponentImagePicker"
 class ImagePickerModule : Module() {
 
   override fun definition() = ModuleDefinition {
-
     Name(moduleName)
 
     // region JS API
@@ -58,9 +60,9 @@ class ImagePickerModule : Module() {
       ensureTargetActivityIsAvailable(options)
       ensureCameraPermissionsAreGranted()
 
-      val mediaFile = createOutputFile(context.cacheDir, options.mediaTypes.toFileExtension())
+      val mediaFile = createOutputFile(cacheDirectory, options.mediaTypes.toFileExtension())
       val uri = mediaFile.toContentUri(context)
-      val contractOptions = options.toCameraContractOptions(uri)
+      val contractOptions = options.toCameraContractOptions(uri.toString())
 
       launchContract({ cameraLauncher.launch(contractOptions) }, options)
     }
@@ -80,20 +82,18 @@ class ImagePickerModule : Module() {
 
     // endregion
 
-    OnCreate {
-      coroutineScope.launch {
-        withContext(Dispatchers.Main) {
-          cameraLauncher = appContext.registerForActivityResult(
-            CameraContract(this@ImagePickerModule),
-          ) { input, result -> handleResultUponActivityDestruction(result, input.options) }
-          imageLibraryLauncher = appContext.registerForActivityResult(
-            ImageLibraryContract(this@ImagePickerModule),
-          ) { input, result -> handleResultUponActivityDestruction(result, input.options) }
-          cropImageLauncher = appContext.registerForActivityResult(
-            CropImageContract(this@ImagePickerModule),
-          ) { input, result -> handleResultUponActivityDestruction(result, input.options) }
-        }
-      }
+    RegisterActivityContracts {
+      cameraLauncher = registerForActivityResult(
+        CameraContract(this@ImagePickerModule)
+      ) { input, result -> handleResultUponActivityDestruction(result, input.options) }
+
+      imageLibraryLauncher = registerForActivityResult(
+        ImageLibraryContract(this@ImagePickerModule)
+      ) { input, result -> handleResultUponActivityDestruction(result, input.options) }
+
+      cropImageLauncher = registerForActivityResult(
+        CropImageContract(this@ImagePickerModule)
+      ) { input, result -> handleResultUponActivityDestruction(result, input.options) }
     }
   }
 
@@ -110,6 +110,9 @@ class ImagePickerModule : Module() {
   private lateinit var imageLibraryLauncher: AppContextActivityResultLauncher<ImageLibraryContractOptions, ImagePickerContractResult>
   private lateinit var cropImageLauncher: AppContextActivityResultLauncher<CropImageContractOptions, ImagePickerContractResult>
 
+  private val cacheDirectory: File
+    get() = appContext.cacheDirectory
+
   /**
    * Stores result for an operation that has been interrupted by the activity destruction.
    * The results are stored only for successful, non-cancelled-by-user scenario.
@@ -123,7 +126,7 @@ class ImagePickerModule : Module() {
    */
   private suspend fun launchContract(
     pickerLauncher: suspend () -> ImagePickerContractResult,
-    options: ImagePickerOptions,
+    options: ImagePickerOptions
   ): Any {
     return try {
       var result = launchPicker(pickerLauncher)
@@ -134,12 +137,12 @@ class ImagePickerModule : Module() {
         result.data[0].first == MediaType.IMAGE
       ) {
         result = launchPicker {
-          cropImageLauncher.launch(CropImageContractOptions(result.data[0].second, options))
+          cropImageLauncher.launch(CropImageContractOptions(result.data[0].second.toString(), options))
         }
       }
       mediaHandler.readExtras(result.data, options)
     } catch (cause: OperationCanceledException) {
-      ImagePickerCancelledResponse()
+      return ImagePickerResponse(canceled = true)
     }
   }
 
@@ -157,11 +160,12 @@ class ImagePickerModule : Module() {
    * Launches picker (image library or camera)
    */
   private suspend fun launchPicker(
-    pickerLauncher: suspend () -> ImagePickerContractResult,
-  ): ImagePickerContractResult.Success = withContext(Dispatchers.Main) {
+    pickerLauncher: suspend () -> ImagePickerContractResult
+  ): ImagePickerContractResult.Success = withContext(Dispatchers.IO) {
     when (val pickingResult = pickerLauncher()) {
       is ImagePickerContractResult.Success -> pickingResult
       is ImagePickerContractResult.Cancelled -> throw OperationCanceledException()
+      is ImagePickerContractResult.Error -> throw FailedToPickMediaException()
     }
   }
 
@@ -170,10 +174,16 @@ class ImagePickerModule : Module() {
   // region Utils
 
   private fun getMediaLibraryPermissions(writeOnly: Boolean): Array<String> =
-    if (writeOnly) {
-      arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE)
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+      listOfNotNull(
+        READ_MEDIA_IMAGES,
+        READ_MEDIA_VIDEO
+      ).toTypedArray()
     } else {
-      arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE)
+      listOfNotNull(
+        Manifest.permission.WRITE_EXTERNAL_STORAGE,
+        Manifest.permission.READ_EXTERNAL_STORAGE.takeIf { !writeOnly }
+      ).toTypedArray()
     }
 
   private fun ensureTargetActivityIsAvailable(options: ImagePickerOptions) {
@@ -188,7 +198,13 @@ class ImagePickerModule : Module() {
 
     permissions.askForPermissions(
       { permissionsResponse ->
-        if (
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+          if (permissionsResponse[Manifest.permission.CAMERA]?.status == PermissionsStatus.GRANTED) {
+            continuation.resume(Unit)
+          } else {
+            continuation.resumeWithException(UserRejectedPermissionsException())
+          }
+        } else if (
           permissionsResponse[Manifest.permission.WRITE_EXTERNAL_STORAGE]?.status == PermissionsStatus.GRANTED &&
           permissionsResponse[Manifest.permission.CAMERA]?.status == PermissionsStatus.GRANTED
         ) {
@@ -197,7 +213,10 @@ class ImagePickerModule : Module() {
           continuation.resumeWithException(UserRejectedPermissionsException())
         }
       },
-      Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.CAMERA
+      *listOfNotNull(
+        Manifest.permission.WRITE_EXTERNAL_STORAGE.takeIf { Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU },
+        Manifest.permission.CAMERA
+      ).toTypedArray()
     )
   }
 
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerOptions.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerOptions.kt
index 3612b3e..fdf7cfa 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerOptions.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerOptions.kt
@@ -1,7 +1,6 @@
 package expo.modules.imagepicker
 
 import java.io.Serializable
-import android.net.Uri
 import android.provider.MediaStore
 import androidx.annotation.FloatRange
 import androidx.annotation.IntRange
@@ -9,6 +8,9 @@ import expo.modules.imagepicker.contracts.CameraContractOptions
 import expo.modules.imagepicker.contracts.ImageLibraryContractOptions
 import expo.modules.kotlin.records.Field
 import expo.modules.kotlin.records.Record
+import expo.modules.kotlin.types.Enumerable
+
+internal const val UNLIMITED_SELECTION: Int = 0
 
 internal class ImagePickerOptions : Record, Serializable {
   @Field
@@ -21,6 +23,10 @@ internal class ImagePickerOptions : Record, Serializable {
   @FloatRange(from = 0.0, to = 1.0)
   var quality: Double = 0.2
 
+  @Field
+  @IntRange(from = 0)
+  var selectionLimit: Int = UNLIMITED_SELECTION
+
   @Field
   var base64: Boolean = false
 
@@ -36,12 +42,15 @@ internal class ImagePickerOptions : Record, Serializable {
   @Field
   var aspect: Pair<Int, Int>? = null
 
-  fun toCameraContractOptions(uri: Uri) = CameraContractOptions(uri, this)
+  @Field
+  var cameraType: CameraType = CameraType.BACK
+
+  fun toCameraContractOptions(uri: String) = CameraContractOptions(uri, this)
 
   fun toImageLibraryContractOptions() = ImageLibraryContractOptions(this)
 }
 
-internal enum class MediaTypes(val value: String) {
+internal enum class MediaTypes(val value: String) : Enumerable {
   IMAGES("Images"),
   VIDEOS("Videos"),
   ALL("All");
@@ -77,3 +86,8 @@ internal enum class MediaTypes(val value: String) {
     const val AllMimeType = "*/*"
   }
 }
+
+internal enum class CameraType(val value: String) : Enumerable {
+  BACK("back"),
+  FRONT("front")
+}
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerResponse.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerResponse.kt
index 4348b3a..eb7a12c 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerResponse.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerResponse.kt
@@ -3,51 +3,29 @@ package expo.modules.imagepicker
 import android.os.Bundle
 import expo.modules.kotlin.records.Field
 import expo.modules.kotlin.records.Record
-
-internal class ImagePickerCancelledResponse : Record {
-  @Field
-  val cancelled: Boolean = true
-}
-
-internal sealed class ImagePickerResponse : Record {
-  @Field
-  val cancelled: Boolean = false
-
-  sealed class Single(
-    @Field val type: MediaType,
-    @Field val uri: String,
-    @Field val width: Int,
-    @Field val height: Int,
-    @Field val assetId: String?,
-  ) : ImagePickerResponse() {
-    class Image(
-      uri: String,
-      width: Int,
-      height: Int,
-      assetId: String?,
-
-      @Field val base64: String?,
-      @Field val exif: Bundle?
-    ) : Single(MediaType.IMAGE, uri, width, height, assetId)
-
-    class Video(
-      uri: String,
-      width: Int,
-      height: Int,
-      assetId: String?,
-
-      @Field val duration: Int,
-      @Field val rotation: Int
-    ) : Single(MediaType.VIDEO, uri, width, height, assetId)
-  }
-
-  class Multiple(
-    @Field
-    val selected: List<Single>
-  ) : ImagePickerResponse()
-}
-
-enum class MediaType(val value: String) {
+import expo.modules.kotlin.types.Enumerable
+
+internal class ImagePickerAsset(
+  @Field val assetId: String? = null,
+  @Field val type: MediaType = MediaType.IMAGE,
+  @Field val uri: String = "",
+  @Field val width: Int = 0,
+  @Field val height: Int = 0,
+  @Field val fileName: String? = null,
+  @Field val filesize: Long? = null,
+  @Field val mimeType: String? = null,
+  @Field val base64: String? = null,
+  @Field val exif: Bundle? = null,
+  @Field val duration: Int? = null,
+  @Field val rotation: Int? = null
+) : Record
+
+internal class ImagePickerResponse(
+  @Field val canceled: Boolean = false,
+  @Field val assets: List<ImagePickerAsset>? = null
+) : Record
+
+enum class MediaType(val value: String) : Enumerable {
   VIDEO("video"),
-  IMAGE("image"),
+  IMAGE("image")
 }
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerUtils.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerUtils.kt
index 26e3397..dd9a6c2 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerUtils.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/ImagePickerUtils.kt
@@ -148,7 +148,7 @@ internal fun Intent.getAllDataUris(): List<Uri> {
 internal suspend fun copyFile(
   sourceUri: Uri,
   targetFile: File,
-  contentResolver: ContentResolver,
+  contentResolver: ContentResolver
 ) = runInterruptible {
   val targetUri = Uri.fromFile(targetFile)
 
@@ -184,7 +184,7 @@ internal suspend fun copyExifData(
     ExifInterface.TAG_IMAGE_WIDTH,
     ExifInterface.TAG_PIXEL_X_DIMENSION,
     ExifInterface.TAG_PIXEL_Y_DIMENSION,
-    ExifInterface.TAG_ORIENTATION,
+    ExifInterface.TAG_ORIENTATION
   )
 
   try {
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/MediaHandler.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/MediaHandler.kt
index fdb1ed2..acaf2fb 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/MediaHandler.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/MediaHandler.kt
@@ -3,22 +3,24 @@ package expo.modules.imagepicker
 import android.content.Context
 import android.media.MediaMetadataRetriever
 import android.net.Uri
+import android.provider.OpenableColumns
 import android.util.Base64
 import androidx.core.net.toUri
 import expo.modules.imagepicker.exporters.CompressionImageExporter
 import expo.modules.imagepicker.exporters.ImageExporter
 import expo.modules.imagepicker.exporters.RawImageExporter
 import expo.modules.kotlin.providers.AppContextProvider
+import java.io.File
 
 internal class MediaHandler(
-  private val appContextProvider: AppContextProvider,
+  private val appContextProvider: AppContextProvider
 ) {
   private val context: Context
     get() = requireNotNull(appContextProvider.appContext.reactContext) { "React Application Context is null" }
 
   internal suspend fun readExtras(
     bareResult: List<Pair<MediaType, Uri>>,
-    options: ImagePickerOptions,
+    options: ImagePickerOptions
   ): ImagePickerResponse {
     val results = bareResult.map { (mediaType, uri) ->
       when (mediaType) {
@@ -27,24 +29,26 @@ internal class MediaHandler(
       }
     }
 
-    return if (results.size == 1) {
-      results[0]
-    } else {
-      ImagePickerResponse.Multiple(results)
-    }
+    return ImagePickerResponse(
+      canceled = false,
+      assets = results
+    )
   }
 
+  private val cacheDirectory: File
+    get() = appContextProvider.appContext.cacheDirectory
+
   private suspend fun handleImage(
     sourceUri: Uri,
-    options: ImagePickerOptions,
-  ): ImagePickerResponse.Single.Image {
+    options: ImagePickerOptions
+  ): ImagePickerAsset {
     val exporter: ImageExporter = if (options.quality == ImagePickerConstants.MAXIMUM_QUALITY) {
       RawImageExporter()
     } else {
       CompressionImageExporter(appContextProvider, options.quality)
     }
-
-    val outputFile = createOutputFile(context.cacheDir, getType(context.contentResolver, sourceUri).toImageFileExtension())
+    val mimeType = getType(context.contentResolver, sourceUri)
+    val outputFile = createOutputFile(cacheDirectory, mimeType.toImageFileExtension())
 
     val exportedImage = exporter.exportAsync(sourceUri, outputFile, context.contentResolver)
     val base64 = options.base64.takeIf { it }
@@ -53,20 +57,39 @@ internal class MediaHandler(
     val exif = options.exif.takeIf { it }
       ?.let { exportedImage.exif(context.contentResolver) }
 
-    return ImagePickerResponse.Single.Image(
+    val fileData = getAdditionalFileData(sourceUri)
+
+    return ImagePickerAsset(
+      type = MediaType.IMAGE,
       uri = Uri.fromFile(outputFile).toString(),
       width = exportedImage.width,
       height = exportedImage.height,
+      fileName = fileData?.fileName,
+      filesize = fileData?.filesize,
+      mimeType = mimeType,
       base64 = base64,
       exif = exif,
       assetId = sourceUri.getMediaStoreAssetId()
     )
   }
 
+  private fun getAdditionalFileData(uri: Uri): AdditionalFileData? = context.contentResolver.query(uri, null, null, null, null)?.use { cursor ->
+    val nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME)
+    val sizeIndex = cursor.getColumnIndex(OpenableColumns.SIZE)
+    cursor.moveToFirst()
+
+    val name: String? = cursor.getString(nameIndex)
+    val size = cursor.getLong(sizeIndex)
+    AdditionalFileData(
+      name,
+      size
+    )
+  }
+
   private suspend fun handleVideo(
-    sourceUri: Uri,
-  ): ImagePickerResponse.Single.Video {
-    val outputFile = createOutputFile(context.cacheDir, ".mp4")
+    sourceUri: Uri
+  ): ImagePickerAsset {
+    val outputFile = createOutputFile(cacheDirectory, ".mp4")
     copyFile(sourceUri, outputFile, context.contentResolver)
     val outputUri = outputFile.toUri()
 
@@ -75,10 +98,17 @@ internal class MediaHandler(
         setDataSource(context, outputUri)
       }
 
-      ImagePickerResponse.Single.Video(
+      val fileData = getAdditionalFileData(sourceUri)
+      val mimeType = getType(context.contentResolver, sourceUri)
+
+      return ImagePickerAsset(
+        type = MediaType.VIDEO,
         uri = outputUri.toString(),
         width = metadataRetriever.extractInt(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH),
         height = metadataRetriever.extractInt(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT),
+        fileName = fileData?.fileName,
+        filesize = fileData?.filesize,
+        mimeType = mimeType,
         duration = metadataRetriever.extractInt(MediaMetadataRetriever.METADATA_KEY_DURATION),
         rotation = metadataRetriever.extractInt(MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION),
         assetId = sourceUri.getMediaStoreAssetId()
@@ -88,3 +118,8 @@ internal class MediaHandler(
     }
   }
 }
+
+data class AdditionalFileData(
+  val fileName: String?,
+  val filesize: Long?
+)
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/CameraContract.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/CameraContract.kt
index be71151..fd95ca6 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/CameraContract.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/CameraContract.kt
@@ -7,7 +7,9 @@ import android.content.Intent
 import android.net.Uri
 import android.provider.MediaStore
 import androidx.activity.result.contract.ActivityResultContract
+import androidx.core.net.toUri
 import expo.modules.imagepicker.ImagePickerOptions
+import expo.modules.imagepicker.CameraType
 import expo.modules.imagepicker.toMediaType
 import expo.modules.kotlin.activityresult.AppContextActivityResultContract
 import expo.modules.kotlin.providers.AppContextProvider
@@ -20,27 +22,36 @@ import java.io.Serializable
  * @see [androidx.activity.result.contract.ActivityResultContracts.TakePicture] or [androidx.activity.result.contract.ActivityResultContracts.CaptureVideo]
  */
 internal class CameraContract(
-  private val appContextProvider: AppContextProvider,
+  private val appContextProvider: AppContextProvider
 ) : AppContextActivityResultContract<CameraContractOptions, ImagePickerContractResult> {
-  val contentResolver: ContentResolver
+  private val contentResolver: ContentResolver
     get() = requireNotNull(appContextProvider.appContext.reactContext) {
       "React Application Context is null"
     }.contentResolver
 
   override fun createIntent(context: Context, input: CameraContractOptions): Intent =
     Intent(input.options.mediaTypes.toCameraIntentAction())
-      .putExtra(MediaStore.EXTRA_OUTPUT, input.uri)
+      .putExtra(MediaStore.EXTRA_OUTPUT, input.uri.toUri())
       .apply {
         if (input.options.mediaTypes.toCameraIntentAction() == MediaStore.ACTION_VIDEO_CAPTURE) {
           putExtra(MediaStore.EXTRA_DURATION_LIMIT, input.options.videoMaxDuration)
         }
+        if (input.options.cameraType == CameraType.FRONT) {
+          putExtra("android.intent.extras.LENS_FACING_FRONT", 1)
+          putExtra("android.intent.extras.CAMERA_FACING", 1)
+          putExtra("android.intent.extra.USE_FRONT_CAMERA", true)
+        } else {
+          putExtra("android.intent.extras.LENS_FACING_BACK", 1)
+          putExtra("android.intent.extras.CAMERA_FACING", 0)
+          putExtra("android.intent.extra.USE_FRONT_CAMERA", false)
+        }
       }
 
   override fun parseResult(input: CameraContractOptions, resultCode: Int, intent: Intent?): ImagePickerContractResult =
     if (resultCode == Activity.RESULT_CANCELED) {
-      ImagePickerContractResult.Cancelled()
+      ImagePickerContractResult.Cancelled
     } else {
-      val uri = input.uri
+      val uri = Uri.parse(input.uri)
       val type = uri.toMediaType(contentResolver)
       ImagePickerContractResult.Success(listOf(type to uri))
     }
@@ -50,6 +61,6 @@ internal data class CameraContractOptions(
   /**
    * Destination file in a form of content-[Uri] to save results coming from camera to.
    */
-  val uri: Uri,
-  val options: ImagePickerOptions,
+  val uri: String,
+  val options: ImagePickerOptions
 ) : Serializable
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/ContractsUtils.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/ContractsUtils.kt
index aa8906a..ac3e864 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/ContractsUtils.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/ContractsUtils.kt
@@ -7,6 +7,7 @@ import expo.modules.imagepicker.MediaType
  * Data required to be returned upon successful contract completion
  */
 internal sealed class ImagePickerContractResult private constructor() {
-  class Cancelled : ImagePickerContractResult()
   class Success(val data: List<Pair<MediaType, Uri>>) : ImagePickerContractResult()
+  object Cancelled : ImagePickerContractResult()
+  object Error : ImagePickerContractResult()
 }
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/CropImageContract.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/CropImageContract.kt
index 8017f1a..cf29792 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/CropImageContract.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/CropImageContract.kt
@@ -3,7 +3,7 @@ package expo.modules.imagepicker.contracts
 import android.app.Activity
 import android.content.Context
 import android.content.Intent
-import android.net.Uri
+import android.os.Build
 import androidx.core.net.toFile
 import androidx.core.net.toUri
 import androidx.core.os.bundleOf
@@ -22,17 +22,18 @@ import kotlinx.coroutines.runBlocking
 import java.io.Serializable
 
 internal class CropImageContract(
-  private val appContextProvider: AppContextProvider,
+  private val appContextProvider: AppContextProvider
 ) : AppContextActivityResultContract<CropImageContractOptions, ImagePickerContractResult> {
   override fun createIntent(context: Context, input: CropImageContractOptions) = Intent(context, CropImageActivity::class.java).apply {
-    val mediaType = expo.modules.imagepicker.getType(context.contentResolver, input.sourceUri)
+    val mediaType = expo.modules.imagepicker.getType(context.contentResolver, input.sourceUri.toUri())
     val compressFormat = mediaType.toBitmapCompressFormat()
-    val outputUri = createOutputFile(context.cacheDir, compressFormat.toImageFileExtension()).toUri()
+    val cacheDirectory = appContextProvider.appContext.cacheDirectory
+    val outputUri = createOutputFile(cacheDirectory, compressFormat.toImageFileExtension()).toUri()
 
     putExtra(
       CropImage.CROP_IMAGE_EXTRA_BUNDLE,
       bundleOf(
-        CropImage.CROP_IMAGE_EXTRA_SOURCE to input.sourceUri,
+        CropImage.CROP_IMAGE_EXTRA_SOURCE to input.sourceUri.toUri(),
         CropImage.CROP_IMAGE_EXTRA_OPTIONS to CropImageOptions().apply {
           outputCompressFormat = compressFormat
           outputCompressQuality = (input.options.quality * 100).toInt()
@@ -45,26 +46,28 @@ internal class CropImageContract(
             fixAspectRatio = true
             initialCropWindowPaddingRatio = 0f
           }
-
-          validate()
         }
       )
     )
   }
 
   override fun parseResult(input: CropImageContractOptions, resultCode: Int, intent: Intent?): ImagePickerContractResult {
-    val result = intent?.getParcelableExtra<CropImage.ActivityResult?>(CropImage.CROP_IMAGE_EXTRA_RESULT)
+    val result = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+      intent?.getParcelableExtra(CropImage.CROP_IMAGE_EXTRA_RESULT, CropImage.ActivityResult::class.java)
+    } else {
+      intent?.getParcelableExtra(CropImage.CROP_IMAGE_EXTRA_RESULT)
+    }
     if (resultCode == Activity.RESULT_CANCELED || result == null) {
-      return ImagePickerContractResult.Cancelled()
+      return ImagePickerContractResult.Cancelled
     }
     val targetUri = requireNotNull(result.uriContent)
     val contentResolver = requireNotNull(appContextProvider.appContext.reactContext) { "React Application Context is null" }.contentResolver
-    runBlocking { copyExifData(input.sourceUri, targetUri.toFile(), contentResolver) }
+    runBlocking { copyExifData(input.sourceUri.toUri(), targetUri.toFile(), contentResolver) }
     return ImagePickerContractResult.Success(listOf(MediaType.IMAGE to targetUri))
   }
 }
 
 internal data class CropImageContractOptions(
-  val sourceUri: Uri,
-  val options: ImagePickerOptions,
+  val sourceUri: String,
+  val options: ImagePickerOptions
 ) : Serializable
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/ImageLibraryContract.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/ImageLibraryContract.kt
index 7c21f10..ff15c91 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/ImageLibraryContract.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/contracts/ImageLibraryContract.kt
@@ -5,10 +5,16 @@ import android.content.ContentResolver
 import android.content.Context
 import android.content.Intent
 import android.net.Uri
+import androidx.activity.result.PickVisualMediaRequest
+import androidx.activity.result.contract.ActivityResultContracts.PickVisualMedia
+import androidx.activity.result.contract.ActivityResultContracts.PickMultipleVisualMedia
 import expo.modules.imagepicker.ImagePickerOptions
+import expo.modules.imagepicker.MediaTypes
+import expo.modules.imagepicker.UNLIMITED_SELECTION
 import expo.modules.imagepicker.getAllDataUris
 import expo.modules.imagepicker.toMediaType
 import expo.modules.kotlin.activityresult.AppContextActivityResultContract
+import expo.modules.kotlin.exception.Exceptions
 import expo.modules.kotlin.providers.AppContextProvider
 import java.io.Serializable
 
@@ -20,33 +26,78 @@ import java.io.Serializable
  * @see [androidx.activity.result.contract.ActivityResultContracts.GetMultipleContents]
  */
 internal class ImageLibraryContract(
-  private val appContextProvider: AppContextProvider,
+  private val appContextProvider: AppContextProvider
 ) : AppContextActivityResultContract<ImageLibraryContractOptions, ImagePickerContractResult> {
-  val contentResolver: ContentResolver
-    get() = requireNotNull(appContextProvider.appContext.reactContext) {
-      "React Application Context is null"
-    }.contentResolver
-
-  override fun createIntent(context: Context, input: ImageLibraryContractOptions) =
-    Intent(Intent.ACTION_GET_CONTENT)
-      .addCategory(Intent.CATEGORY_OPENABLE)
-      .setType(input.options.mediaTypes.toMimeType())
-      .apply {
-        if (input.options.allowsMultipleSelection) {
-          putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true)
+  private val contentResolver: ContentResolver
+    get() = appContextProvider.appContext.reactContext?.contentResolver
+      ?: throw Exceptions.ReactContextLost()
+
+  override fun createIntent(context: Context, input: ImageLibraryContractOptions): Intent {
+    val request = PickVisualMediaRequest.Builder()
+      .setMediaType(
+        when (input.options.mediaTypes) {
+          MediaTypes.VIDEOS -> {
+            PickVisualMedia.VideoOnly
+          }
+
+          MediaTypes.IMAGES -> {
+            PickVisualMedia.ImageOnly
+          }
+
+          else -> {
+            PickVisualMedia.ImageAndVideo
+          }
         }
+      )
+      .build()
+
+    if (input.options.allowsMultipleSelection) {
+      val selectionLimit = input.options.selectionLimit
+
+      if (selectionLimit == 1) {
+        // If multiple selection is allowed but the limit is 1, we should ignore
+        // the multiple selection flag and just treat it as a single selection.
+        return PickVisualMedia().createIntent(context, request)
+      }
+
+      if (selectionLimit > 1) {
+        return PickMultipleVisualMedia(selectionLimit).createIntent(context, request)
+      }
+
+      // If the selection limit is 0, it is the same as unlimited selection.
+      if (selectionLimit == UNLIMITED_SELECTION) {
+        return PickMultipleVisualMedia().createIntent(context, request)
       }
+    }
+
+    return PickVisualMedia().createIntent(context, request)
+  }
 
   override fun parseResult(input: ImageLibraryContractOptions, resultCode: Int, intent: Intent?) =
     if (resultCode == Activity.RESULT_CANCELED) {
-      ImagePickerContractResult.Cancelled()
-    } else if (input.options.allowsMultipleSelection) {
-      val uris = requireNotNull(intent).getAllDataUris()
-      ImagePickerContractResult.Success(uris.map { uri -> uri.toMediaType(contentResolver) to uri })
+      ImagePickerContractResult.Cancelled
     } else {
-      val uri = requireNotNull(requireNotNull(intent).data)
-      val type = uri.toMediaType(contentResolver)
-      ImagePickerContractResult.Success(listOf(type to uri))
+      intent?.takeIf { resultCode == Activity.RESULT_OK }?.getAllDataUris()?.let { uris ->
+        if (input.options.allowsMultipleSelection) {
+          ImagePickerContractResult.Success(
+            uris.map { uri ->
+              uri.toMediaType(contentResolver) to uri
+            }
+          )
+        } else {
+          if (intent.data != null) {
+            intent.data?.let { uri ->
+              val type = uri.toMediaType(contentResolver)
+              ImagePickerContractResult.Success(listOf(type to uri))
+            }
+          } else {
+            uris.firstOrNull()?.let { uri ->
+              val type = uri.toMediaType(contentResolver)
+              ImagePickerContractResult.Success(listOf(type to uri))
+            } ?: ImagePickerContractResult.Error
+          }
+        }
+      } ?: ImagePickerContractResult.Error
     }
 }
 
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/exporters/CompressionImageExporter.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/exporters/CompressionImageExporter.kt
index 1446be7..46a059f 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/exporters/CompressionImageExporter.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/exporters/CompressionImageExporter.kt
@@ -22,7 +22,7 @@ import java.util.concurrent.ExecutionException
 class CompressionImageExporter(
   private val appContextProvider: AppContextProvider,
   @FloatRange(from = 0.0, to = 1.0)
-  quality: Double,
+  quality: Double
 ) : ImageExporter {
   private val compressQuality = (quality * 100).toInt()
 
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/exporters/ImageExporter.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/exporters/ImageExporter.kt
index 71c9f17..bb1ba39 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/exporters/ImageExporter.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/exporters/ImageExporter.kt
@@ -28,7 +28,7 @@ interface ImageExporter {
 open class ImageExportResult(
   val width: Int,
   val height: Int,
-  private val imageFile: File,
+  private val imageFile: File
 ) {
   /**
    * Allows accessing the underlying byte data in a lazy manner.
diff --git a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/exporters/RawImageExporter.kt b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/exporters/RawImageExporter.kt
index 5d6fb38..f339e5f 100644
--- a/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/exporters/RawImageExporter.kt
+++ b/node_modules/expo-image-picker/android/src/main/java/expo/modules/imagepicker/exporters/RawImageExporter.kt
@@ -2,6 +2,7 @@ package expo.modules.imagepicker.exporters
 
 import android.content.ContentResolver
 import android.graphics.BitmapFactory
+import android.media.ExifInterface
 import android.net.Uri
 import expo.modules.imagepicker.copyFile
 import java.io.File
@@ -10,17 +11,25 @@ class RawImageExporter : ImageExporter {
   override suspend fun exportAsync(
     source: Uri,
     output: File,
-    contentResolver: ContentResolver,
+    contentResolver: ContentResolver
   ): ImageExportResult {
     copyFile(source, output, contentResolver)
-
+    val exifInterface = ExifInterface(output.absolutePath)
+    val imageRotation = exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION, 0)
+    val isRotatedLandscape = (imageRotation == ExifInterface.ORIENTATION_ROTATE_90 || imageRotation == ExifInterface.ORIENTATION_ROTATE_270)
     val options = BitmapFactory.Options().apply { inJustDecodeBounds = true }
+
     BitmapFactory.decodeFile(output.absolutePath, options)
 
+    // Image will be rotated to orientation suggested by the exif data, because of that the width and height
+    // returned by the picker should be switched if the image is rotated 90 or 270 degrees.
+    val width: Int = if (isRotatedLandscape) options.outHeight else options.outWidth
+    val height: Int = if (isRotatedLandscape) options.outWidth else options.outHeight
+
     return ImageExportResult(
-      options.outWidth,
-      options.outHeight,
-      output,
+      width,
+      height,
+      output
     )
   }
 }
diff --git a/node_modules/expo-image-picker/build/ExponentImagePicker.d.ts b/node_modules/expo-image-picker/build/ExponentImagePicker.d.ts
index fd24ce8..6c9e27f 100644
--- a/node_modules/expo-image-picker/build/ExponentImagePicker.d.ts
+++ b/node_modules/expo-image-picker/build/ExponentImagePicker.d.ts
@@ -1,3 +1,3 @@
-declare const _default: import("expo-modules-core").ProxyNativeModule;
+declare const _default: any;
 export default _default;
 //# sourceMappingURL=ExponentImagePicker.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ExponentImagePicker.d.ts.map b/node_modules/expo-image-picker/build/ExponentImagePicker.d.ts.map
index 1e97e3f..d4037a0 100644
--- a/node_modules/expo-image-picker/build/ExponentImagePicker.d.ts.map
+++ b/node_modules/expo-image-picker/build/ExponentImagePicker.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"ExponentImagePicker.d.ts","sourceRoot":"","sources":["../src/ExponentImagePicker.ts"],"names":[],"mappings":";AACA,wBAAsD"}
\ No newline at end of file
+{"version":3,"file":"ExponentImagePicker.d.ts","sourceRoot":"","sources":["../src/ExponentImagePicker.ts"],"names":[],"mappings":";AACA,wBAA0D"}
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ExponentImagePicker.js b/node_modules/expo-image-picker/build/ExponentImagePicker.js
index 852a9b7..b03e08a 100644
--- a/node_modules/expo-image-picker/build/ExponentImagePicker.js
+++ b/node_modules/expo-image-picker/build/ExponentImagePicker.js
@@ -1,3 +1,3 @@
-import { NativeModulesProxy } from 'expo-modules-core';
-export default NativeModulesProxy.ExponentImagePicker;
+import { requireNativeModule } from 'expo-modules-core';
+export default requireNativeModule('ExponentImagePicker');
 //# sourceMappingURL=ExponentImagePicker.js.map
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ExponentImagePicker.js.map b/node_modules/expo-image-picker/build/ExponentImagePicker.js.map
index 109ccdd..12dab2e 100644
--- a/node_modules/expo-image-picker/build/ExponentImagePicker.js.map
+++ b/node_modules/expo-image-picker/build/ExponentImagePicker.js.map
@@ -1 +1 @@
-{"version":3,"file":"ExponentImagePicker.js","sourceRoot":"","sources":["../src/ExponentImagePicker.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AACvD,eAAe,kBAAkB,CAAC,mBAAmB,CAAC","sourcesContent":["import { NativeModulesProxy } from 'expo-modules-core';\nexport default NativeModulesProxy.ExponentImagePicker;\n"]}
\ No newline at end of file
+{"version":3,"file":"ExponentImagePicker.js","sourceRoot":"","sources":["../src/ExponentImagePicker.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AACxD,eAAe,mBAAmB,CAAC,qBAAqB,CAAC,CAAC","sourcesContent":["import { requireNativeModule } from 'expo-modules-core';\nexport default requireNativeModule('ExponentImagePicker');\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ExponentImagePicker.web.d.ts b/node_modules/expo-image-picker/build/ExponentImagePicker.web.d.ts
index a8884c4..b817990 100644
--- a/node_modules/expo-image-picker/build/ExponentImagePicker.web.d.ts
+++ b/node_modules/expo-image-picker/build/ExponentImagePicker.web.d.ts
@@ -1,17 +1,17 @@
 import { PermissionResponse } from 'expo-modules-core';
-import { ImagePickerMultipleResult, ImagePickerResult, MediaTypeOptions } from './ImagePicker.types';
+import { ImagePickerResult, MediaTypeOptions } from './ImagePicker.types';
 declare const _default: {
     readonly name: string;
     launchImageLibraryAsync({ mediaTypes, allowsMultipleSelection, base64, }: {
         mediaTypes?: MediaTypeOptions | undefined;
         allowsMultipleSelection?: boolean | undefined;
         base64?: boolean | undefined;
-    }): Promise<ImagePickerResult | ImagePickerMultipleResult>;
+    }): Promise<ImagePickerResult>;
     launchCameraAsync({ mediaTypes, allowsMultipleSelection, base64, }: {
         mediaTypes?: MediaTypeOptions | undefined;
         allowsMultipleSelection?: boolean | undefined;
         base64?: boolean | undefined;
-    }): Promise<ImagePickerResult | ImagePickerMultipleResult>;
+    }): Promise<ImagePickerResult>;
     getCameraPermissionsAsync(): Promise<PermissionResponse>;
     requestCameraPermissionsAsync(): Promise<PermissionResponse>;
     getMediaLibraryPermissionsAsync(_writeOnly: boolean): Promise<PermissionResponse>;
diff --git a/node_modules/expo-image-picker/build/ExponentImagePicker.web.d.ts.map b/node_modules/expo-image-picker/build/ExponentImagePicker.web.d.ts.map
index 28f6f6f..9f610d6 100644
--- a/node_modules/expo-image-picker/build/ExponentImagePicker.web.d.ts.map
+++ b/node_modules/expo-image-picker/build/ExponentImagePicker.web.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"ExponentImagePicker.web.d.ts","sourceRoot":"","sources":["../src/ExponentImagePicker.web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAA8B,MAAM,mBAAmB,CAAC;AAGnF,OAAO,EAGL,yBAAyB,EACzB,iBAAiB,EACjB,gBAAgB,EAEjB,MAAM,qBAAqB,CAAC;;;;;;;QAiBvB,QAAQ,iBAAiB,GAAG,yBAAyB,CAAC;;;;;QAgBtD,QAAQ,iBAAiB,GAAG,yBAAyB,CAAC;;;gDA2BR,OAAO;oDAGH,OAAO,GAAG,QAAQ,kBAAkB,CAAC;;AAvD7F,wBA0DE"}
\ No newline at end of file
+{"version":3,"file":"ExponentImagePicker.web.d.ts","sourceRoot":"","sources":["../src/ExponentImagePicker.web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAA8B,MAAM,mBAAmB,CAAC;AAEnF,OAAO,EAEL,iBAAiB,EACjB,gBAAgB,EAEjB,MAAM,qBAAqB,CAAC;;;;;;;QAiBvB,QAAQ,iBAAiB,CAAC;;;;;QAgB1B,QAAQ,iBAAiB,CAAC;;;gDA2BoB,OAAO;oDAGH,OAAO,GAAG,QAAQ,kBAAkB,CAAC;;AAvD7F,wBA0DE"}
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ExponentImagePicker.web.js b/node_modules/expo-image-picker/build/ExponentImagePicker.web.js
index 834d6e6..98747e0 100644
--- a/node_modules/expo-image-picker/build/ExponentImagePicker.web.js
+++ b/node_modules/expo-image-picker/build/ExponentImagePicker.web.js
@@ -1,5 +1,4 @@
 import { PermissionStatus, Platform } from 'expo-modules-core';
-import { v4 } from 'uuid';
 import { MediaTypeOptions, } from './ImagePicker.types';
 const MediaTypeInput = {
     [MediaTypeOptions.All]: 'video/mp4,video/quicktime,video/x-m4v,video/*,image/*',
@@ -13,7 +12,7 @@ export default {
     async launchImageLibraryAsync({ mediaTypes = MediaTypeOptions.Images, allowsMultipleSelection = false, base64 = false, }) {
         // SSR guard
         if (!Platform.isDOMAvailable) {
-            return { cancelled: true };
+            return { canceled: true, assets: null };
         }
         return await openFileBrowserAsync({
             mediaTypes,
@@ -24,7 +23,7 @@ export default {
     async launchCameraAsync({ mediaTypes = MediaTypeOptions.Images, allowsMultipleSelection = false, base64 = false, }) {
         // SSR guard
         if (!Platform.isDOMAvailable) {
-            return { cancelled: true };
+            return { canceled: true, assets: null };
         }
         return await openFileBrowserAsync({
             mediaTypes,
@@ -67,7 +66,7 @@ function openFileBrowserAsync({ mediaTypes, capture = false, allowsMultipleSelec
     input.style.display = 'none';
     input.setAttribute('type', 'file');
     input.setAttribute('accept', mediaTypeFormat);
-    input.setAttribute('id', v4());
+    input.setAttribute('id', String(Math.random()));
     if (allowsMultipleSelection) {
         input.setAttribute('multiple', 'multiple');
     }
@@ -75,22 +74,15 @@ function openFileBrowserAsync({ mediaTypes, capture = false, allowsMultipleSelec
         input.setAttribute('capture', 'camera');
     }
     document.body.appendChild(input);
-    return new Promise((resolve, reject) => {
+    return new Promise((resolve) => {
         input.addEventListener('change', async () => {
             if (input.files) {
-                if (!allowsMultipleSelection) {
-                    const img = await readFile(input.files[0], { base64 });
-                    resolve({
-                        ...img,
-                    });
-                }
-                else {
-                    const imgs = await Promise.all(Array.from(input.files).map((file) => readFile(file, { base64 })));
-                    resolve({
-                        cancelled: false,
-                        selected: imgs,
-                    });
-                }
+                const files = allowsMultipleSelection ? input.files : [input.files[0]];
+                const assets = await Promise.all(Array.from(files).map((file) => readFile(file, { base64 })));
+                resolve({ canceled: false, assets });
+            }
+            else {
+                resolve({ canceled: true, assets: null });
             }
             document.body.removeChild(input);
         });
@@ -106,27 +98,25 @@ function readFile(targetFile, options) {
         };
         reader.onload = ({ target }) => {
             const uri = target.result;
-            const returnRaw = () => resolve({
-                uri,
-                width: 0,
-                height: 0,
-                cancelled: false,
-            });
+            const returnRaw = () => resolve({ uri, width: 0, height: 0 });
             if (typeof uri === 'string') {
                 const image = new Image();
                 image.src = uri;
-                image.onload = () => resolve({
-                    uri,
-                    width: image.naturalWidth ?? image.width,
-                    height: image.naturalHeight ?? image.height,
-                    cancelled: false,
-                    // The blob's result cannot be directly decoded as Base64 without
-                    // first removing the Data-URL declaration preceding the
-                    // Base64-encoded data. To retrieve only the Base64 encoded string,
-                    // first remove data:*/*;base64, from the result.
-                    // https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
-                    ...(options.base64 && { base64: uri.substr(uri.indexOf(',') + 1) }),
-                });
+                image.onload = () => {
+                    resolve({
+                        uri,
+                        width: image.naturalWidth ?? image.width,
+                        height: image.naturalHeight ?? image.height,
+                        mimeType: targetFile.type,
+                        fileName: targetFile.name,
+                        // The blob's result cannot be directly decoded as Base64 without
+                        // first removing the Data-URL declaration preceding the
+                        // Base64-encoded data. To retrieve only the Base64 encoded string,
+                        // first remove data:*/*;base64, from the result.
+                        // https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
+                        ...(options.base64 && { base64: uri.substr(uri.indexOf(',') + 1) }),
+                    });
+                };
                 image.onerror = () => returnRaw();
             }
             else {
diff --git a/node_modules/expo-image-picker/build/ExponentImagePicker.web.js.map b/node_modules/expo-image-picker/build/ExponentImagePicker.web.js.map
index 1625e19..b4b6d57 100644
--- a/node_modules/expo-image-picker/build/ExponentImagePicker.web.js.map
+++ b/node_modules/expo-image-picker/build/ExponentImagePicker.web.js.map
@@ -1 +1 @@
-{"version":3,"file":"ExponentImagePicker.web.js","sourceRoot":"","sources":["../src/ExponentImagePicker.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { PermissionResponse, PermissionStatus, Platform } from 'expo-modules-core';\nimport { v4 } from 'uuid';\n\nimport {\n  ExpandImagePickerResult,\n  ImageInfo,\n  ImagePickerMultipleResult,\n  ImagePickerResult,\n  MediaTypeOptions,\n  OpenFileBrowserOptions,\n} from './ImagePicker.types';\n\nconst MediaTypeInput = {\n  [MediaTypeOptions.All]: 'video/mp4,video/quicktime,video/x-m4v,video/*,image/*',\n  [MediaTypeOptions.Images]: 'image/*',\n  [MediaTypeOptions.Videos]: 'video/mp4,video/quicktime,video/x-m4v,video/*',\n};\n\nexport default {\n  get name(): string {\n    return 'ExponentImagePicker';\n  },\n\n  async launchImageLibraryAsync({\n    mediaTypes = MediaTypeOptions.Images,\n    allowsMultipleSelection = false,\n    base64 = false,\n  }): Promise<ImagePickerResult | ImagePickerMultipleResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { cancelled: true };\n    }\n    return await openFileBrowserAsync({\n      mediaTypes,\n      allowsMultipleSelection,\n      base64,\n    });\n  },\n\n  async launchCameraAsync({\n    mediaTypes = MediaTypeOptions.Images,\n    allowsMultipleSelection = false,\n    base64 = false,\n  }): Promise<ImagePickerResult | ImagePickerMultipleResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { cancelled: true };\n    }\n    return await openFileBrowserAsync({\n      mediaTypes,\n      allowsMultipleSelection,\n      capture: true,\n      base64,\n    });\n  },\n\n  /*\n   * Delegate to expo-permissions to request camera permissions\n   */\n  async getCameraPermissionsAsync() {\n    return permissionGrantedResponse();\n  },\n  async requestCameraPermissionsAsync() {\n    return permissionGrantedResponse();\n  },\n\n  /*\n   * Camera roll permissions don't need to be requested on web, so we always\n   * respond with granted.\n   */\n  async getMediaLibraryPermissionsAsync(_writeOnly: boolean) {\n    return permissionGrantedResponse();\n  },\n  async requestMediaLibraryPermissionsAsync(_writeOnly: boolean): Promise<PermissionResponse> {\n    return permissionGrantedResponse();\n  },\n};\n\nfunction permissionGrantedResponse(): PermissionResponse {\n  return {\n    status: PermissionStatus.GRANTED,\n    expires: 'never',\n    granted: true,\n    canAskAgain: true,\n  };\n}\n\nfunction openFileBrowserAsync<T extends OpenFileBrowserOptions>({\n  mediaTypes,\n  capture = false,\n  allowsMultipleSelection = false,\n  base64,\n}: T): Promise<ExpandImagePickerResult<T>> {\n  const mediaTypeFormat = MediaTypeInput[mediaTypes];\n\n  const input = document.createElement('input');\n  input.style.display = 'none';\n  input.setAttribute('type', 'file');\n  input.setAttribute('accept', mediaTypeFormat);\n  input.setAttribute('id', v4());\n  if (allowsMultipleSelection) {\n    input.setAttribute('multiple', 'multiple');\n  }\n  if (capture) {\n    input.setAttribute('capture', 'camera');\n  }\n  document.body.appendChild(input);\n\n  return new Promise((resolve, reject) => {\n    input.addEventListener('change', async () => {\n      if (input.files) {\n        if (!allowsMultipleSelection) {\n          const img: ImageInfo = await readFile(input.files[0], { base64 });\n          resolve({\n            ...img,\n          } as ExpandImagePickerResult<T>);\n        } else {\n          const imgs: ImageInfo[] = await Promise.all(\n            Array.from(input.files).map((file) => readFile(file, { base64 }))\n          );\n          resolve({\n            cancelled: false,\n            selected: imgs,\n          } as ExpandImagePickerResult<T>);\n        }\n      }\n      document.body.removeChild(input);\n    });\n\n    const event = new MouseEvent('click');\n    input.dispatchEvent(event);\n  });\n}\n\nfunction readFile(targetFile: Blob, options: { base64: boolean }): Promise<ImageInfo> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = () => {\n      reject(new Error(`Failed to read the selected media because the operation failed.`));\n    };\n    reader.onload = ({ target }) => {\n      const uri = (target as any).result;\n      const returnRaw = () =>\n        resolve({\n          uri,\n          width: 0,\n          height: 0,\n          cancelled: false,\n        });\n\n      if (typeof uri === 'string') {\n        const image = new Image();\n        image.src = uri;\n        image.onload = () =>\n          resolve({\n            uri,\n            width: image.naturalWidth ?? image.width,\n            height: image.naturalHeight ?? image.height,\n            cancelled: false,\n            // The blob's result cannot be directly decoded as Base64 without\n            // first removing the Data-URL declaration preceding the\n            // Base64-encoded data. To retrieve only the Base64 encoded string,\n            // first remove data:*/*;base64, from the result.\n            // https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n            ...(options.base64 && { base64: uri.substr(uri.indexOf(',') + 1) }),\n          });\n        image.onerror = () => returnRaw();\n      } else {\n        returnRaw();\n      }\n    };\n\n    reader.readAsDataURL(targetFile);\n  });\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"ExponentImagePicker.web.js","sourceRoot":"","sources":["../src/ExponentImagePicker.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { PermissionResponse, PermissionStatus, Platform } from 'expo-modules-core';\n\nimport {\n  ImagePickerAsset,\n  ImagePickerResult,\n  MediaTypeOptions,\n  OpenFileBrowserOptions,\n} from './ImagePicker.types';\n\nconst MediaTypeInput = {\n  [MediaTypeOptions.All]: 'video/mp4,video/quicktime,video/x-m4v,video/*,image/*',\n  [MediaTypeOptions.Images]: 'image/*',\n  [MediaTypeOptions.Videos]: 'video/mp4,video/quicktime,video/x-m4v,video/*',\n};\n\nexport default {\n  get name(): string {\n    return 'ExponentImagePicker';\n  },\n\n  async launchImageLibraryAsync({\n    mediaTypes = MediaTypeOptions.Images,\n    allowsMultipleSelection = false,\n    base64 = false,\n  }): Promise<ImagePickerResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { canceled: true, assets: null };\n    }\n    return await openFileBrowserAsync({\n      mediaTypes,\n      allowsMultipleSelection,\n      base64,\n    });\n  },\n\n  async launchCameraAsync({\n    mediaTypes = MediaTypeOptions.Images,\n    allowsMultipleSelection = false,\n    base64 = false,\n  }): Promise<ImagePickerResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { canceled: true, assets: null };\n    }\n    return await openFileBrowserAsync({\n      mediaTypes,\n      allowsMultipleSelection,\n      capture: true,\n      base64,\n    });\n  },\n\n  /*\n   * Delegate to expo-permissions to request camera permissions\n   */\n  async getCameraPermissionsAsync() {\n    return permissionGrantedResponse();\n  },\n  async requestCameraPermissionsAsync() {\n    return permissionGrantedResponse();\n  },\n\n  /*\n   * Camera roll permissions don't need to be requested on web, so we always\n   * respond with granted.\n   */\n  async getMediaLibraryPermissionsAsync(_writeOnly: boolean) {\n    return permissionGrantedResponse();\n  },\n  async requestMediaLibraryPermissionsAsync(_writeOnly: boolean): Promise<PermissionResponse> {\n    return permissionGrantedResponse();\n  },\n};\n\nfunction permissionGrantedResponse(): PermissionResponse {\n  return {\n    status: PermissionStatus.GRANTED,\n    expires: 'never',\n    granted: true,\n    canAskAgain: true,\n  };\n}\n\nfunction openFileBrowserAsync({\n  mediaTypes,\n  capture = false,\n  allowsMultipleSelection = false,\n  base64,\n}: OpenFileBrowserOptions): Promise<ImagePickerResult> {\n  const mediaTypeFormat = MediaTypeInput[mediaTypes];\n\n  const input = document.createElement('input');\n  input.style.display = 'none';\n  input.setAttribute('type', 'file');\n  input.setAttribute('accept', mediaTypeFormat);\n  input.setAttribute('id', String(Math.random()));\n  if (allowsMultipleSelection) {\n    input.setAttribute('multiple', 'multiple');\n  }\n  if (capture) {\n    input.setAttribute('capture', 'camera');\n  }\n  document.body.appendChild(input);\n\n  return new Promise((resolve) => {\n    input.addEventListener('change', async () => {\n      if (input.files) {\n        const files = allowsMultipleSelection ? input.files : [input.files[0]];\n        const assets: ImagePickerAsset[] = await Promise.all(\n          Array.from(files).map((file) => readFile(file, { base64 }))\n        );\n\n        resolve({ canceled: false, assets });\n      } else {\n        resolve({ canceled: true, assets: null });\n      }\n      document.body.removeChild(input);\n    });\n\n    const event = new MouseEvent('click');\n    input.dispatchEvent(event);\n  });\n}\n\nfunction readFile(targetFile: File, options: { base64: boolean }): Promise<ImagePickerAsset> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = () => {\n      reject(new Error(`Failed to read the selected media because the operation failed.`));\n    };\n    reader.onload = ({ target }) => {\n      const uri = (target as any).result;\n      const returnRaw = () => resolve({ uri, width: 0, height: 0 });\n\n      if (typeof uri === 'string') {\n        const image = new Image();\n        image.src = uri;\n\n        image.onload = () => {\n          resolve({\n            uri,\n            width: image.naturalWidth ?? image.width,\n            height: image.naturalHeight ?? image.height,\n            mimeType: targetFile.type,\n            fileName: targetFile.name,\n            // The blob's result cannot be directly decoded as Base64 without\n            // first removing the Data-URL declaration preceding the\n            // Base64-encoded data. To retrieve only the Base64 encoded string,\n            // first remove data:*/*;base64, from the result.\n            // https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n            ...(options.base64 && { base64: uri.substr(uri.indexOf(',') + 1) }),\n          });\n        };\n        image.onerror = () => returnRaw();\n      } else {\n        returnRaw();\n      }\n    };\n\n    reader.readAsDataURL(targetFile);\n  });\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ImagePicker.d.ts b/node_modules/expo-image-picker/build/ImagePicker.d.ts
index 43116da..5b05884 100644
--- a/node_modules/expo-image-picker/build/ImagePicker.d.ts
+++ b/node_modules/expo-image-picker/build/ImagePicker.d.ts
@@ -1,14 +1,10 @@
 import { PermissionStatus, PermissionExpiration, PermissionHookOptions, PermissionResponse } from 'expo-modules-core';
-import { CameraPermissionResponse, CameraRollPermissionResponse, MediaLibraryPermissionResponse, ImagePickerResult, ImagePickerErrorResult, MediaTypeOptions, ImagePickerOptions, VideoExportPreset, ExpandImagePickerResult, ImageInfo, ImagePickerMultipleResult, ImagePickerCancelledResult, OpenFileBrowserOptions, UIImagePickerControllerQualityType, UIImagePickerPresentationStyle } from './ImagePicker.types';
+import { CameraPermissionResponse, MediaLibraryPermissionResponse, ImagePickerResult, ImagePickerErrorResult, ImagePickerOptions } from './ImagePicker.types';
 /**
  * Checks user's permissions for accessing camera.
- * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).
+ * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerapermissionresponse).
  */
 export declare function getCameraPermissionsAsync(): Promise<CameraPermissionResponse>;
-/**
- * @deprecated Use `getMediaLibraryPermissionsAsync()` instead.
- */
-export declare function getCameraRollPermissionsAsync(): Promise<MediaLibraryPermissionResponse>;
 /**
  * Checks user's permissions for accessing photos.
  * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`
@@ -21,10 +17,6 @@ export declare function getMediaLibraryPermissionsAsync(writeOnly?: boolean): Pr
  * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).
  */
 export declare function requestCameraPermissionsAsync(): Promise<CameraPermissionResponse>;
-/**
- * @deprecated Use `requestMediaLibraryPermissionsAsync()` instead.
- */
-export declare function requestCameraRollPermissionsAsync(): Promise<MediaLibraryPermissionResponse>;
 /**
  * Asks the user to grant permissions for accessing user's photo. This method does nothing on web.
  * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`
@@ -76,31 +68,32 @@ export declare function getPendingResultAsync(): Promise<(ImagePickerResult | Im
  * intended. The `cancelled` event will not be returned in the browser due to platform restrictions
  * and inconsistencies across browsers.
  * @param options An `ImagePickerOptions` object.
- * @return If the user cancelled the action, the method returns `{ cancelled: true }`. Otherwise,
- * this method returns information about the selected media item. When the chosen item is an image,
- * this method returns `{ cancelled: false, type: 'image', uri, width, height, exif, base64 }`;
- * when the item is a video, this method returns `{ cancelled: false, type: 'video', uri, width, height, duration }`.
+ * @return A promise that resolves to an object with `canceled` and `assets` fields.
+ * When the user canceled the action the `assets` is always `null`, otherwise it's an array of
+ * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).
  */
 export declare function launchCameraAsync(options?: ImagePickerOptions): Promise<ImagePickerResult>;
 /**
  * Display the system UI for choosing an image or a video from the phone's library.
- * Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be called
+ * Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be     called
  * immediately in a user interaction like a button press, otherwise the browser will block the
  * request without a warning.
- * **Animated GIFs support** If the selected image is an animated GIF, the result image will be an
- * animated GIF too if and only if `quality` is set to `undefined` and `allowsEditing` is set to `false`.
+ *
+ * **Animated GIFs support:** On Android, if the selected image is an animated GIF, the result image will be an
+ * animated GIF too if and only if `quality` is explicitly set to `1.0` and `allowsEditing` is set to `false`.
  * Otherwise compression and/or cropper will pick the first frame of the GIF and return it as the
- * result (on Android the result will be a PNG, on iOS ‚Äî GIF).
+ * result (on Android the result will be a PNG). On iOS, both quality and cropping are supported.
+ *
  * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).
  * Therefore, calling `launchImageLibraryAsync` in `componentDidMount`, for example, will **not**
  * work as intended. The `cancelled` event will not be returned in the browser due to platform
  * restrictions and inconsistencies across browsers.
  * @param options An object extended by [`ImagePickerOptions`](#imagepickeroptions).
- * @return If the user cancelled the action, the method returns `{ cancelled: true }`. Otherwise,
- * this method returns information about the selected media item. When the chosen item is an image,
- * this method returns `{ cancelled: false, type: 'image', uri, width, height, exif, base64 }`;
- * when the item is a video, this method returns `{ cancelled: false, type: 'video', uri, width, height, duration }`.
+ * @return A promise that resolves to an object with `canceled` and `assets` fields.
+ * When the user canceled the action the `assets` is always `null`, otherwise it's an array of
+ * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).
  */
-export declare function launchImageLibraryAsync<T extends ImagePickerOptions>(options?: T): Promise<ExpandImagePickerResult<T>>;
-export { MediaTypeOptions, ImagePickerOptions, ImagePickerResult, ImagePickerErrorResult, VideoExportPreset, CameraPermissionResponse, CameraRollPermissionResponse, MediaLibraryPermissionResponse, PermissionStatus, PermissionExpiration, PermissionHookOptions, PermissionResponse, ImageInfo, ImagePickerMultipleResult, ImagePickerCancelledResult, OpenFileBrowserOptions, ExpandImagePickerResult, UIImagePickerControllerQualityType, UIImagePickerPresentationStyle, };
+export declare function launchImageLibraryAsync(options?: ImagePickerOptions): Promise<ImagePickerResult>;
+export * from './ImagePicker.types';
+export { PermissionStatus, PermissionExpiration, PermissionHookOptions, PermissionResponse };
 //# sourceMappingURL=ImagePicker.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ImagePicker.d.ts.map b/node_modules/expo-image-picker/build/ImagePicker.d.ts.map
index 774a37d..c30cdea 100644
--- a/node_modules/expo-image-picker/build/ImagePicker.d.ts.map
+++ b/node_modules/expo-image-picker/build/ImagePicker.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"ImagePicker.d.ts","sourceRoot":"","sources":["../src/ImagePicker.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,gBAAgB,EAChB,oBAAoB,EACpB,qBAAqB,EACrB,kBAAkB,EAInB,MAAM,mBAAmB,CAAC;AAG3B,OAAO,EACL,wBAAwB,EACxB,4BAA4B,EAC5B,8BAA8B,EAC9B,iBAAiB,EACjB,sBAAsB,EACtB,gBAAgB,EAChB,kBAAkB,EAClB,iBAAiB,EACjB,uBAAuB,EACvB,SAAS,EACT,yBAAyB,EACzB,0BAA0B,EAC1B,sBAAsB,EACtB,kCAAkC,EAClC,8BAA8B,EAC/B,MAAM,qBAAqB,CAAC;AAkC7B;;;GAGG;AACH,wBAAsB,yBAAyB,IAAI,OAAO,CAAC,wBAAwB,CAAC,CAEnF;AAED;;GAEG;AACH,wBAAsB,6BAA6B,IAAI,OAAO,CAAC,8BAA8B,CAAC,CAK7F;AAGD;;;;GAIG;AACH,wBAAsB,+BAA+B,CACnD,SAAS,GAAE,OAAe,GACzB,OAAO,CAAC,8BAA8B,CAAC,CAEzC;AAGD;;;;GAIG;AACH,wBAAsB,6BAA6B,IAAI,OAAO,CAAC,wBAAwB,CAAC,CAEvF;AAED;;GAEG;AACH,wBAAsB,iCAAiC,IAAI,OAAO,CAAC,8BAA8B,CAAC,CAKjG;AAGD;;;;GAIG;AACH,wBAAsB,mCAAmC,CACvD,SAAS,GAAE,OAAe,GACzB,OAAO,CAAC,8BAA8B,CAAC,CAGzC;AAGD;;;;;;;;GAQG;AACH,eAAO,MAAM,0BAA0B;;wJAOrC,CAAC;AAGH;;;;;;;;GAQG;AACH,eAAO,MAAM,oBAAoB,4JAG/B,CAAC;AAGH;;;;;;;;;;GAUG;AACH,wBAAsB,qBAAqB,IAAI,OAAO,CACpD,CAAC,iBAAiB,GAAG,sBAAsB,CAAC,EAAE,CAC/C,CAKA;AAGD;;;;;;;;;;;;;;;GAeG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,GAAE,kBAAuB,GAC/B,OAAO,CAAC,iBAAiB,CAAC,CAK5B;AAGD;;;;;;;;;;;;;;;;;;GAkBG;AACH,wBAAsB,uBAAuB,CAAC,CAAC,SAAS,kBAAkB,EACxE,OAAO,CAAC,EAAE,CAAC,GACV,OAAO,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAYrC;AAED,OAAO,EACL,gBAAgB,EAChB,kBAAkB,EAClB,iBAAiB,EACjB,sBAAsB,EACtB,iBAAiB,EACjB,wBAAwB,EACxB,4BAA4B,EAC5B,8BAA8B,EAC9B,gBAAgB,EAChB,oBAAoB,EACpB,qBAAqB,EACrB,kBAAkB,EAClB,SAAS,EACT,yBAAyB,EACzB,0BAA0B,EAC1B,sBAAsB,EACtB,uBAAuB,EACvB,kCAAkC,EAClC,8BAA8B,GAC/B,CAAC"}
\ No newline at end of file
+{"version":3,"file":"ImagePicker.d.ts","sourceRoot":"","sources":["../src/ImagePicker.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,gBAAgB,EAChB,oBAAoB,EACpB,qBAAqB,EACrB,kBAAkB,EAInB,MAAM,mBAAmB,CAAC;AAG3B,OAAO,EACL,wBAAwB,EACxB,8BAA8B,EAC9B,iBAAiB,EACjB,sBAAsB,EACtB,kBAAkB,EACnB,MAAM,qBAAqB,CAAC;AAkC7B;;;GAGG;AACH,wBAAsB,yBAAyB,IAAI,OAAO,CAAC,wBAAwB,CAAC,CAEnF;AAGD;;;;GAIG;AACH,wBAAsB,+BAA+B,CACnD,SAAS,GAAE,OAAe,GACzB,OAAO,CAAC,8BAA8B,CAAC,CAEzC;AAGD;;;;GAIG;AACH,wBAAsB,6BAA6B,IAAI,OAAO,CAAC,wBAAwB,CAAC,CAEvF;AAGD;;;;GAIG;AACH,wBAAsB,mCAAmC,CACvD,SAAS,GAAE,OAAe,GACzB,OAAO,CAAC,8BAA8B,CAAC,CAGzC;AAGD;;;;;;;;GAQG;AACH,eAAO,MAAM,0BAA0B;;wJAOrC,CAAC;AAGH;;;;;;;;GAQG;AACH,eAAO,MAAM,oBAAoB,4JAG/B,CAAC;AAGH;;;;;;;;;;GAUG;AACH,wBAAsB,qBAAqB,IAAI,OAAO,CACpD,CAAC,iBAAiB,GAAG,sBAAsB,CAAC,EAAE,CAC/C,CAKA;AAGD;;;;;;;;;;;;;;GAcG;AACH,wBAAsB,iBAAiB,CACrC,OAAO,GAAE,kBAAuB,GAC/B,OAAO,CAAC,iBAAiB,CAAC,CAK5B;AAGD;;;;;;;;;;;;;;;;;;;GAmBG;AACH,wBAAsB,uBAAuB,CAC3C,OAAO,CAAC,EAAE,kBAAkB,GAC3B,OAAO,CAAC,iBAAiB,CAAC,CAY5B;AAED,cAAc,qBAAqB,CAAC;AAEpC,OAAO,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,kBAAkB,EAAE,CAAC"}
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ImagePicker.js b/node_modules/expo-image-picker/build/ImagePicker.js
index 3ad44ad..1ffe93e 100644
--- a/node_modules/expo-image-picker/build/ImagePicker.js
+++ b/node_modules/expo-image-picker/build/ImagePicker.js
@@ -1,6 +1,5 @@
 import { PermissionStatus, createPermissionHook, UnavailabilityError, CodedError, } from 'expo-modules-core';
 import ExponentImagePicker from './ExponentImagePicker';
-import { MediaTypeOptions, VideoExportPreset, UIImagePickerControllerQualityType, UIImagePickerPresentationStyle, } from './ImagePicker.types';
 function validateOptions(options) {
     const { aspect, quality, videoMaxDuration } = options;
     if (aspect != null) {
@@ -20,18 +19,11 @@ function validateOptions(options) {
 // @needsAudit
 /**
  * Checks user's permissions for accessing camera.
- * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).
+ * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerapermissionresponse).
  */
 export async function getCameraPermissionsAsync() {
     return ExponentImagePicker.getCameraPermissionsAsync();
 }
-/**
- * @deprecated Use `getMediaLibraryPermissionsAsync()` instead.
- */
-export async function getCameraRollPermissionsAsync() {
-    console.warn('ImagePicker.getCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.getMediaLibraryPermissionsAsync()');
-    return getMediaLibraryPermissionsAsync();
-}
 // @needsAudit
 /**
  * Checks user's permissions for accessing photos.
@@ -50,13 +42,6 @@ export async function getMediaLibraryPermissionsAsync(writeOnly = false) {
 export async function requestCameraPermissionsAsync() {
     return ExponentImagePicker.requestCameraPermissionsAsync();
 }
-/**
- * @deprecated Use `requestMediaLibraryPermissionsAsync()` instead.
- */
-export async function requestCameraRollPermissionsAsync() {
-    console.warn('ImagePicker.requestCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.requestMediaLibraryPermissionsAsync()');
-    return requestMediaLibraryPermissionsAsync();
-}
 // @needsAudit
 /**
  * Asks the user to grant permissions for accessing user's photo. This method does nothing on web.
@@ -126,10 +111,9 @@ export async function getPendingResultAsync() {
  * intended. The `cancelled` event will not be returned in the browser due to platform restrictions
  * and inconsistencies across browsers.
  * @param options An `ImagePickerOptions` object.
- * @return If the user cancelled the action, the method returns `{ cancelled: true }`. Otherwise,
- * this method returns information about the selected media item. When the chosen item is an image,
- * this method returns `{ cancelled: false, type: 'image', uri, width, height, exif, base64 }`;
- * when the item is a video, this method returns `{ cancelled: false, type: 'video', uri, width, height, duration }`.
+ * @return A promise that resolves to an object with `canceled` and `assets` fields.
+ * When the user canceled the action the `assets` is always `null`, otherwise it's an array of
+ * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).
  */
 export async function launchCameraAsync(options = {}) {
     if (!ExponentImagePicker.launchCameraAsync) {
@@ -140,22 +124,23 @@ export async function launchCameraAsync(options = {}) {
 // @needsAudit
 /**
  * Display the system UI for choosing an image or a video from the phone's library.
- * Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be called
+ * Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be     called
  * immediately in a user interaction like a button press, otherwise the browser will block the
  * request without a warning.
- * **Animated GIFs support** If the selected image is an animated GIF, the result image will be an
- * animated GIF too if and only if `quality` is set to `undefined` and `allowsEditing` is set to `false`.
+ *
+ * **Animated GIFs support:** On Android, if the selected image is an animated GIF, the result image will be an
+ * animated GIF too if and only if `quality` is explicitly set to `1.0` and `allowsEditing` is set to `false`.
  * Otherwise compression and/or cropper will pick the first frame of the GIF and return it as the
- * result (on Android the result will be a PNG, on iOS ‚Äî GIF).
+ * result (on Android the result will be a PNG). On iOS, both quality and cropping are supported.
+ *
  * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).
  * Therefore, calling `launchImageLibraryAsync` in `componentDidMount`, for example, will **not**
  * work as intended. The `cancelled` event will not be returned in the browser due to platform
  * restrictions and inconsistencies across browsers.
  * @param options An object extended by [`ImagePickerOptions`](#imagepickeroptions).
- * @return If the user cancelled the action, the method returns `{ cancelled: true }`. Otherwise,
- * this method returns information about the selected media item. When the chosen item is an image,
- * this method returns `{ cancelled: false, type: 'image', uri, width, height, exif, base64 }`;
- * when the item is a video, this method returns `{ cancelled: false, type: 'video', uri, width, height, duration }`.
+ * @return A promise that resolves to an object with `canceled` and `assets` fields.
+ * When the user canceled the action the `assets` is always `null`, otherwise it's an array of
+ * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).
  */
 export async function launchImageLibraryAsync(options) {
     if (!ExponentImagePicker.launchImageLibraryAsync) {
@@ -168,5 +153,6 @@ export async function launchImageLibraryAsync(options) {
     }
     return await ExponentImagePicker.launchImageLibraryAsync(options ?? {});
 }
-export { MediaTypeOptions, VideoExportPreset, PermissionStatus, UIImagePickerControllerQualityType, UIImagePickerPresentationStyle, };
+export * from './ImagePicker.types';
+export { PermissionStatus };
 //# sourceMappingURL=ImagePicker.js.map
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ImagePicker.js.map b/node_modules/expo-image-picker/build/ImagePicker.js.map
index fd30d8d..80c8d78 100644
--- a/node_modules/expo-image-picker/build/ImagePicker.js.map
+++ b/node_modules/expo-image-picker/build/ImagePicker.js.map
@@ -1 +1 @@
-{"version":3,"file":"ImagePicker.js","sourceRoot":"","sources":["../src/ImagePicker.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,gBAAgB,EAIhB,oBAAoB,EACpB,mBAAmB,EACnB,UAAU,GACX,MAAM,mBAAmB,CAAC;AAE3B,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAML,gBAAgB,EAEhB,iBAAiB,EAMjB,kCAAkC,EAClC,8BAA8B,GAC/B,MAAM,qBAAqB,CAAC;AAE7B,SAAS,eAAe,CAAC,OAA2B;IAClD,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,GAAG,OAAO,CAAC;IAEtD,IAAI,MAAM,IAAI,IAAI,EAAE;QAClB,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,MAAM,CAAC;QAEtB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;YACpB,MAAM,IAAI,UAAU,CAClB,sBAAsB,EACtB,+BAA+B,CAAC,IAAI,CAAC,6BAA6B,CACnE,CAAC;SACH;KACF;IAED,IAAI,OAAO,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,EAAE;QAC3C,MAAM,IAAI,UAAU,CAClB,sBAAsB,EACtB,2BAA2B,OAAO,oCAAoC,CACvE,CAAC;KACH;IAED,IAAI,gBAAgB,IAAI,gBAAgB,GAAG,CAAC,EAAE;QAC5C,MAAM,IAAI,UAAU,CAClB,sBAAsB,EACtB,oCAAoC,gBAAgB,kCAAkC,CACvF,CAAC;KACH;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,cAAc;AACd;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,yBAAyB;IAC7C,OAAO,mBAAmB,CAAC,yBAAyB,EAAE,CAAC;AACzD,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,6BAA6B;IACjD,OAAO,CAAC,IAAI,CACV,sHAAsH,CACvH,CAAC;IACF,OAAO,+BAA+B,EAAE,CAAC;AAC3C,CAAC;AAED,cAAc;AACd;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,+BAA+B,CACnD,YAAqB,KAAK;IAE1B,OAAO,mBAAmB,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC;AACxE,CAAC;AAED,cAAc;AACd;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,6BAA6B;IACjD,OAAO,mBAAmB,CAAC,6BAA6B,EAAE,CAAC;AAC7D,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,iCAAiC;IACrD,OAAO,CAAC,IAAI,CACV,8HAA8H,CAC/H,CAAC;IACF,OAAO,mCAAmC,EAAE,CAAC;AAC/C,CAAC;AAED,cAAc;AACd;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,mCAAmC,CACvD,YAAqB,KAAK;IAE1B,MAAM,iBAAiB,GAAG,mBAAmB,CAAC,mCAAmC,CAAC;IAClF,OAAO,iBAAiB,CAAC,SAAS,CAAC,CAAC;AACtC,CAAC;AAED,cAAc;AACd;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,0BAA0B,GAAG,oBAAoB,CAG5D;IACA,4FAA4F;IAC5F,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,+BAA+B,CAAC,OAAO,EAAE,SAAS,CAAC;IAC3E,aAAa,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,mCAAmC,CAAC,OAAO,EAAE,SAAS,CAAC;CACpF,CAAC,CAAC;AAEH,cAAc;AACd;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,oBAAoB,CAAC;IACvD,SAAS,EAAE,yBAAyB;IACpC,aAAa,EAAE,6BAA6B;CAC7C,CAAC,CAAC;AAEH,cAAc;AACd;;;;;;;;;;GAUG;AACH,MAAM,CAAC,KAAK,UAAU,qBAAqB;IAGzC,IAAI,mBAAmB,CAAC,qBAAqB,EAAE;QAC7C,OAAO,mBAAmB,CAAC,qBAAqB,EAAE,CAAC;KACpD;IACD,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,cAAc;AACd;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,UAA8B,EAAE;IAEhC,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE;QAC1C,MAAM,IAAI,mBAAmB,CAAC,aAAa,EAAE,mBAAmB,CAAC,CAAC;KACnE;IACD,OAAO,MAAM,mBAAmB,CAAC,iBAAiB,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;AAC/E,CAAC;AAED,cAAc;AACd;;;;;;;;;;;;;;;;;;GAkBG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAC3C,OAAW;IAEX,IAAI,CAAC,mBAAmB,CAAC,uBAAuB,EAAE;QAChD,MAAM,IAAI,mBAAmB,CAAC,aAAa,EAAE,yBAAyB,CAAC,CAAC;KACzE;IACD,IAAI,OAAO,EAAE,aAAa,IAAI,OAAO,CAAC,uBAAuB,EAAE;QAC7D,OAAO,CAAC,IAAI,CACV,qHAAqH;YACnH,2FAA2F;YAC3F,sBAAsB,CACzB,CAAC;KACH;IACD,OAAO,MAAM,mBAAmB,CAAC,uBAAuB,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;AAC1E,CAAC;AAED,OAAO,EACL,gBAAgB,EAIhB,iBAAiB,EAIjB,gBAAgB,EAShB,kCAAkC,EAClC,8BAA8B,GAC/B,CAAC","sourcesContent":["import {\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  PermissionResponse,\n  createPermissionHook,\n  UnavailabilityError,\n  CodedError,\n} from 'expo-modules-core';\n\nimport ExponentImagePicker from './ExponentImagePicker';\nimport {\n  CameraPermissionResponse,\n  CameraRollPermissionResponse,\n  MediaLibraryPermissionResponse,\n  ImagePickerResult,\n  ImagePickerErrorResult,\n  MediaTypeOptions,\n  ImagePickerOptions,\n  VideoExportPreset,\n  ExpandImagePickerResult,\n  ImageInfo,\n  ImagePickerMultipleResult,\n  ImagePickerCancelledResult,\n  OpenFileBrowserOptions,\n  UIImagePickerControllerQualityType,\n  UIImagePickerPresentationStyle,\n} from './ImagePicker.types';\n\nfunction validateOptions(options: ImagePickerOptions) {\n  const { aspect, quality, videoMaxDuration } = options;\n\n  if (aspect != null) {\n    const [x, y] = aspect;\n\n    if (x <= 0 || y <= 0) {\n      throw new CodedError(\n        'ERR_INVALID_ARGUMENT',\n        `Invalid aspect ratio values ${x}:${y}. Provide positive numbers.`\n      );\n    }\n  }\n\n  if (quality && (quality < 0 || quality > 1)) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'quality' value ${quality}. Provide a value between 0 and 1.`\n    );\n  }\n\n  if (videoMaxDuration && videoMaxDuration < 0) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'videoMaxDuration' value ${videoMaxDuration}. Provide a non-negative number.`\n    );\n  }\n\n  return options;\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).\n */\nexport async function getCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.getCameraPermissionsAsync();\n}\n\n/**\n * @deprecated Use `getMediaLibraryPermissionsAsync()` instead.\n */\nexport async function getCameraRollPermissionsAsync(): Promise<MediaLibraryPermissionResponse> {\n  console.warn(\n    'ImagePicker.getCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.getMediaLibraryPermissionsAsync()'\n  );\n  return getMediaLibraryPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing photos.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function getMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  return ExponentImagePicker.getMediaLibraryPermissionsAsync(writeOnly);\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera. This does nothing on web because the\n * browser camera is not used.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).\n */\nexport async function requestCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.requestCameraPermissionsAsync();\n}\n\n/**\n * @deprecated Use `requestMediaLibraryPermissionsAsync()` instead.\n */\nexport async function requestCameraRollPermissionsAsync(): Promise<MediaLibraryPermissionResponse> {\n  console.warn(\n    'ImagePicker.requestCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.requestMediaLibraryPermissionsAsync()'\n  );\n  return requestMediaLibraryPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing user's photo. This method does nothing on web.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function requestMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  const imagePickerMethod = ExponentImagePicker.requestMediaLibraryPermissionsAsync;\n  return imagePickerMethod(writeOnly);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the media library.\n * This uses both `requestMediaLibraryPermissionsAsync` and `getMediaLibraryPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useMediaLibraryPermissions();\n * ```\n */\nexport const useMediaLibraryPermissions = createPermissionHook<\n  MediaLibraryPermissionResponse,\n  { writeOnly?: boolean }\n>({\n  // TODO(cedric): permission requesters should have an options param or a different requester\n  getMethod: (options) => getMediaLibraryPermissionsAsync(options?.writeOnly),\n  requestMethod: (options) => requestMediaLibraryPermissionsAsync(options?.writeOnly),\n});\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Android system sometimes kills the `MainActivity` after the `ImagePicker` finishes. When this\n * happens, we lost the data selected from the `ImagePicker`. However, you can retrieve the lost\n * data by calling `getPendingResultAsync`. You can test this functionality by turning on\n * `Don't keep activities` in the developer options.\n * @return\n * - **On Android:** a promise that resolves to an array of objects of exactly same type as in\n * `ImagePicker.launchImageLibraryAsync` or `ImagePicker.launchCameraAsync` if the `ImagePicker`\n * finished successfully. Otherwise, to the array of [`ImagePickerErrorResult`](#imagepickerimagepickererrorresult).\n * - **On other platforms:** an empty array.\n */\nexport async function getPendingResultAsync(): Promise<\n  (ImagePickerResult | ImagePickerErrorResult)[]\n> {\n  if (ExponentImagePicker.getPendingResultAsync) {\n    return ExponentImagePicker.getPendingResultAsync();\n  }\n  return [];\n}\n\n// @needsAudit\n/**\n * Display the system UI for taking a photo with the camera. Requires `Permissions.CAMERA`.\n * On Android and iOS 10 `Permissions.CAMERA_ROLL` is also required. On mobile web, this must be\n * called immediately in a user interaction like a button press, otherwise the browser will block\n * the request without a warning.\n * > **Note:** Make sure that you handle `MainActivity` destruction on **Android**. See [ImagePicker.getPendingResultAsync](#imagepickergetpendingresultasync).\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchCameraAsync` in `componentDidMount`, for example, will **not** work as\n * intended. The `cancelled` event will not be returned in the browser due to platform restrictions\n * and inconsistencies across browsers.\n * @param options An `ImagePickerOptions` object.\n * @return If the user cancelled the action, the method returns `{ cancelled: true }`. Otherwise,\n * this method returns information about the selected media item. When the chosen item is an image,\n * this method returns `{ cancelled: false, type: 'image', uri, width, height, exif, base64 }`;\n * when the item is a video, this method returns `{ cancelled: false, type: 'video', uri, width, height, duration }`.\n */\nexport async function launchCameraAsync(\n  options: ImagePickerOptions = {}\n): Promise<ImagePickerResult> {\n  if (!ExponentImagePicker.launchCameraAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchCameraAsync');\n  }\n  return await ExponentImagePicker.launchCameraAsync(validateOptions(options));\n}\n\n// @needsAudit\n/**\n * Display the system UI for choosing an image or a video from the phone's library.\n * Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be called\n * immediately in a user interaction like a button press, otherwise the browser will block the\n * request without a warning.\n * **Animated GIFs support** If the selected image is an animated GIF, the result image will be an\n * animated GIF too if and only if `quality` is set to `undefined` and `allowsEditing` is set to `false`.\n * Otherwise compression and/or cropper will pick the first frame of the GIF and return it as the\n * result (on Android the result will be a PNG, on iOS ‚Äî GIF).\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchImageLibraryAsync` in `componentDidMount`, for example, will **not**\n * work as intended. The `cancelled` event will not be returned in the browser due to platform\n * restrictions and inconsistencies across browsers.\n * @param options An object extended by [`ImagePickerOptions`](#imagepickeroptions).\n * @return If the user cancelled the action, the method returns `{ cancelled: true }`. Otherwise,\n * this method returns information about the selected media item. When the chosen item is an image,\n * this method returns `{ cancelled: false, type: 'image', uri, width, height, exif, base64 }`;\n * when the item is a video, this method returns `{ cancelled: false, type: 'video', uri, width, height, duration }`.\n */\nexport async function launchImageLibraryAsync<T extends ImagePickerOptions>(\n  options?: T\n): Promise<ExpandImagePickerResult<T>> {\n  if (!ExponentImagePicker.launchImageLibraryAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');\n  }\n  if (options?.allowsEditing && options.allowsMultipleSelection) {\n    console.warn(\n      '[expo-image-picker] `allowsEditing` is not supported when `allowsMultipleSelection` is enabled and will be ignored.' +\n        \"Disable either 'allowsEditing' or 'allowsMultipleSelection' in 'launchImageLibraryAsync' \" +\n        'to fix this warning.'\n    );\n  }\n  return await ExponentImagePicker.launchImageLibraryAsync(options ?? {});\n}\n\nexport {\n  MediaTypeOptions,\n  ImagePickerOptions,\n  ImagePickerResult,\n  ImagePickerErrorResult,\n  VideoExportPreset,\n  CameraPermissionResponse,\n  CameraRollPermissionResponse,\n  MediaLibraryPermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  PermissionResponse,\n  ImageInfo,\n  ImagePickerMultipleResult,\n  ImagePickerCancelledResult,\n  OpenFileBrowserOptions,\n  ExpandImagePickerResult,\n  UIImagePickerControllerQualityType,\n  UIImagePickerPresentationStyle,\n};\n"]}
\ No newline at end of file
+{"version":3,"file":"ImagePicker.js","sourceRoot":"","sources":["../src/ImagePicker.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  PermissionResponse,\n  createPermissionHook,\n  UnavailabilityError,\n  CodedError,\n} from 'expo-modules-core';\n\nimport ExponentImagePicker from './ExponentImagePicker';\nimport {\n  CameraPermissionResponse,\n  MediaLibraryPermissionResponse,\n  ImagePickerResult,\n  ImagePickerErrorResult,\n  ImagePickerOptions,\n} from './ImagePicker.types';\n\nfunction validateOptions(options: ImagePickerOptions) {\n  const { aspect, quality, videoMaxDuration } = options;\n\n  if (aspect != null) {\n    const [x, y] = aspect;\n\n    if (x <= 0 || y <= 0) {\n      throw new CodedError(\n        'ERR_INVALID_ARGUMENT',\n        `Invalid aspect ratio values ${x}:${y}. Provide positive numbers.`\n      );\n    }\n  }\n\n  if (quality && (quality < 0 || quality > 1)) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'quality' value ${quality}. Provide a value between 0 and 1.`\n    );\n  }\n\n  if (videoMaxDuration && videoMaxDuration < 0) {\n    throw new CodedError(\n      'ERR_INVALID_ARGUMENT',\n      `Invalid 'videoMaxDuration' value ${videoMaxDuration}. Provide a non-negative number.`\n    );\n  }\n\n  return options;\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing camera.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerapermissionresponse).\n */\nexport async function getCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.getCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing photos.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function getMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  return ExponentImagePicker.getMediaLibraryPermissionsAsync(writeOnly);\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing camera. This does nothing on web because the\n * browser camera is not used.\n * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).\n */\nexport async function requestCameraPermissionsAsync(): Promise<CameraPermissionResponse> {\n  return ExponentImagePicker.requestCameraPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing user's photo. This method does nothing on web.\n * @param writeOnly Whether to request write or read and write permissions. Defaults to `false`\n * @return A promise that fulfills with an object of type [MediaLibraryPermissionResponse](#medialibrarypermissionresponse).\n */\nexport async function requestMediaLibraryPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<MediaLibraryPermissionResponse> {\n  const imagePickerMethod = ExponentImagePicker.requestMediaLibraryPermissionsAsync;\n  return imagePickerMethod(writeOnly);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the media library.\n * This uses both `requestMediaLibraryPermissionsAsync` and `getMediaLibraryPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useMediaLibraryPermissions();\n * ```\n */\nexport const useMediaLibraryPermissions = createPermissionHook<\n  MediaLibraryPermissionResponse,\n  { writeOnly?: boolean }\n>({\n  // TODO(cedric): permission requesters should have an options param or a different requester\n  getMethod: (options) => getMediaLibraryPermissionsAsync(options?.writeOnly),\n  requestMethod: (options) => requestMediaLibraryPermissionsAsync(options?.writeOnly),\n});\n\n// @needsAudit\n/**\n * Check or request permissions to access the camera.\n * This uses both `requestCameraPermissionsAsync` and `getCameraPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = ImagePicker.useCameraPermissions();\n * ```\n */\nexport const useCameraPermissions = createPermissionHook({\n  getMethod: getCameraPermissionsAsync,\n  requestMethod: requestCameraPermissionsAsync,\n});\n\n// @needsAudit\n/**\n * Android system sometimes kills the `MainActivity` after the `ImagePicker` finishes. When this\n * happens, we lost the data selected from the `ImagePicker`. However, you can retrieve the lost\n * data by calling `getPendingResultAsync`. You can test this functionality by turning on\n * `Don't keep activities` in the developer options.\n * @return\n * - **On Android:** a promise that resolves to an array of objects of exactly same type as in\n * `ImagePicker.launchImageLibraryAsync` or `ImagePicker.launchCameraAsync` if the `ImagePicker`\n * finished successfully. Otherwise, to the array of [`ImagePickerErrorResult`](#imagepickerimagepickererrorresult).\n * - **On other platforms:** an empty array.\n */\nexport async function getPendingResultAsync(): Promise<\n  (ImagePickerResult | ImagePickerErrorResult)[]\n> {\n  if (ExponentImagePicker.getPendingResultAsync) {\n    return ExponentImagePicker.getPendingResultAsync();\n  }\n  return [];\n}\n\n// @needsAudit\n/**\n * Display the system UI for taking a photo with the camera. Requires `Permissions.CAMERA`.\n * On Android and iOS 10 `Permissions.CAMERA_ROLL` is also required. On mobile web, this must be\n * called immediately in a user interaction like a button press, otherwise the browser will block\n * the request without a warning.\n * > **Note:** Make sure that you handle `MainActivity` destruction on **Android**. See [ImagePicker.getPendingResultAsync](#imagepickergetpendingresultasync).\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchCameraAsync` in `componentDidMount`, for example, will **not** work as\n * intended. The `cancelled` event will not be returned in the browser due to platform restrictions\n * and inconsistencies across browsers.\n * @param options An `ImagePickerOptions` object.\n * @return A promise that resolves to an object with `canceled` and `assets` fields.\n * When the user canceled the action the `assets` is always `null`, otherwise it's an array of\n * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).\n */\nexport async function launchCameraAsync(\n  options: ImagePickerOptions = {}\n): Promise<ImagePickerResult> {\n  if (!ExponentImagePicker.launchCameraAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchCameraAsync');\n  }\n  return await ExponentImagePicker.launchCameraAsync(validateOptions(options));\n}\n\n// @needsAudit\n/**\n * Display the system UI for choosing an image or a video from the phone's library.\n * Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be     called\n * immediately in a user interaction like a button press, otherwise the browser will block the\n * request without a warning.\n *\n * **Animated GIFs support:** On Android, if the selected image is an animated GIF, the result image will be an\n * animated GIF too if and only if `quality` is explicitly set to `1.0` and `allowsEditing` is set to `false`.\n * Otherwise compression and/or cropper will pick the first frame of the GIF and return it as the\n * result (on Android the result will be a PNG). On iOS, both quality and cropping are supported.\n *\n * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).\n * Therefore, calling `launchImageLibraryAsync` in `componentDidMount`, for example, will **not**\n * work as intended. The `cancelled` event will not be returned in the browser due to platform\n * restrictions and inconsistencies across browsers.\n * @param options An object extended by [`ImagePickerOptions`](#imagepickeroptions).\n * @return A promise that resolves to an object with `canceled` and `assets` fields.\n * When the user canceled the action the `assets` is always `null`, otherwise it's an array of\n * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).\n */\nexport async function launchImageLibraryAsync(\n  options?: ImagePickerOptions\n): Promise<ImagePickerResult> {\n  if (!ExponentImagePicker.launchImageLibraryAsync) {\n    throw new UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');\n  }\n  if (options?.allowsEditing && options.allowsMultipleSelection) {\n    console.warn(\n      '[expo-image-picker] `allowsEditing` is not supported when `allowsMultipleSelection` is enabled and will be ignored.' +\n        \"Disable either 'allowsEditing' or 'allowsMultipleSelection' in 'launchImageLibraryAsync' \" +\n        'to fix this warning.'\n    );\n  }\n  return await ExponentImagePicker.launchImageLibraryAsync(options ?? {});\n}\n\nexport * from './ImagePicker.types';\n\nexport { PermissionStatus, PermissionExpiration, PermissionHookOptions, PermissionResponse };\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ImagePicker.types.d.ts b/node_modules/expo-image-picker/build/ImagePicker.types.d.ts
index a539d20..8adca8a 100644
--- a/node_modules/expo-image-picker/build/ImagePicker.types.d.ts
+++ b/node_modules/expo-image-picker/build/ImagePicker.types.d.ts
@@ -2,21 +2,16 @@ import { PermissionResponse } from 'expo-modules-core';
 /**
  * Alias for `PermissionResponse` type exported by `expo-modules-core`.
  */
-export declare type CameraPermissionResponse = PermissionResponse;
+export type CameraPermissionResponse = PermissionResponse;
 /**
- * Extends `PermissionResponse` type exported by `expo-modules-core` and contains additional iOS-specific field.
+ * Extends `PermissionResponse` type exported by `expo-modules-core`, containing additional iOS-specific field.
  */
-export declare type MediaLibraryPermissionResponse = PermissionResponse & {
+export type MediaLibraryPermissionResponse = PermissionResponse & {
     /**
      * @platform ios
      */
     accessPrivileges?: 'all' | 'limited' | 'none';
 };
-/**
- * An alias for the `MediaLibraryPermissionResponse` object.
- * @deprecated Use `ImagePicker.MediaLibraryPermissionResponse` instead.
- */
-export declare type CameraRollPermissionResponse = MediaLibraryPermissionResponse;
 export declare enum MediaTypeOptions {
     /**
      * Images and videos.
@@ -165,41 +160,46 @@ export declare enum UIImagePickerPresentationStyle {
      *
      * @platform ios 13+
      */
-    AUTOMATIC = "automatic",
-    /**
-     * @deprecated Use `UIImagePickerPresentationStyle.FULL_SCREEN` instead.
-     */
-    FullScreen = "fullScreen",
-    /**
-     * @deprecated Use `UIImagePickerPresentationStyle.PAGE_SHEET` instead.
-     */
-    PageSheet = "pageSheet",
-    /**
-     * @deprecated Use `UIImagePickerPresentationStyle.FORM_SHEET` instead.
-     */
-    FormSheet = "formSheet",
+    AUTOMATIC = "automatic"
+}
+/**
+ * Picker preferred asset representation mode. Its values are directly mapped to the [`PHPickerConfigurationAssetRepresentationMode`](https://developer.apple.com/documentation/photokit/phpickerconfigurationassetrepresentationmode).
+ *
+ * @platform ios
+ */
+export declare enum UIImagePickerPreferredAssetRepresentationMode {
     /**
-     * @deprecated Use `UIImagePickerPresentationStyle.CURRENT_CONTEXT` instead.
+     * A mode that indicates that the system chooses the appropriate asset representation.
      */
-    CurrentContext = "currentContext",
+    Automatic = "automatic",
     /**
-     * @deprecated Use `UIImagePickerPresentationStyle.OVER_FULL_SCREEN` instead.
+     * A mode that uses the most compatible asset representation.
      */
-    OverFullScreen = "overFullScreen",
+    Compatible = "compatible",
     /**
-     * @deprecated Use `UIImagePickerPresentationStyle.OVER_CURRENT_CONTEXT` instead.
+     * A mode that uses the current representation to avoid transcoding, if possible.
      */
-    OverCurrentContext = "overCurrentContext",
+    Current = "current"
+}
+export declare enum CameraType {
     /**
-     * @deprecated Use `UIImagePickerPresentationStyle.POPOVER` instead.
+     * Back/rear camera.
      */
-    Popover = "popover",
+    back = "back",
     /**
-     * @deprecated Use `UIImagePickerPresentationStyle.AUTOMATIC` instead.
+     * Front camera
      */
-    Automatic = "automatic"
+    front = "front"
 }
-export declare type ImageInfo = {
+/**
+ * @hidden
+ * @deprecated Use `ImagePickerAsset` instead
+ */
+export type ImageInfo = ImagePickerAsset;
+/**
+ * Represents an asset (image or video) returned by the image picker or camera.
+ */
+export type ImagePickerAsset = {
     /**
      * URI to the local image or video file (usable as the source of an `Image` element, in the case of
      * an image) and `width` and `height` specify the dimensions of the media.
@@ -232,13 +232,11 @@ export declare type ImageInfo = {
      * Preferred filename to use when saving this item. This might be `null` when the name is unavailable
      * or user gave limited permission to access the media library.
      *
-     * @platform ios
      */
     fileName?: string | null;
     /**
      * File size of the picked image or video, in bytes.
      *
-     * @platform ios
      */
     fileSize?: number;
     /**
@@ -246,30 +244,29 @@ export declare type ImageInfo = {
      * image's EXIF data. The names of this object's properties are EXIF tags and the values are the
      * respective EXIF values for those tags.
      */
-    exif?: Record<string, any>;
+    exif?: Record<string, any> | null;
     /**
-     * Included if the `base64` option is truthy, and is a Base64-encoded string of the selected
-     * image's JPEG data. If you prepend this with `'data:image/jpeg;base64,'` to create a data URI,
+     * When the `base64` option is truthy, it is a Base64-encoded string of the selected image's JPEG data, otherwise `null`.
+     * If you prepend this with `'data:image/jpeg;base64,'` to create a data URI,
      * you can use it as the source of an `Image` element; for example:
      * ```ts
      * <Image
-     *   source={{ uri: 'data:image/jpeg;base64,' + launchCameraResult.base64 }}
+     *   source={{ uri: 'data:image/jpeg;base64,' + asset.base64 }}
      *   style={{ width: 200, height: 200 }}
      * />
      * ```
      */
-    base64?: string;
+    base64?: string | null;
     /**
-     * Length of the video in milliseconds.
+     * Length of the video in milliseconds or `null` if the asset is not a video.
      */
-    duration?: number;
+    duration?: number | null;
     /**
-     * Boolean flag which shows if request was cancelled. If asset data have been returned this should
-     * always be `false`.
+     * The MIME type of the selected asset or `null` if could not be determined.
      */
-    cancelled: boolean;
+    mimeType?: string;
 };
-export declare type ImagePickerErrorResult = {
+export type ImagePickerErrorResult = {
     /**
      * The error code.
      */
@@ -284,23 +281,53 @@ export declare type ImagePickerErrorResult = {
     exception?: string;
 };
 /**
- * An object returned when the pick action has been cancelled by the user.
+ * Type representing successful and canceled pick result.
  */
-export declare type ImagePickerCancelledResult = {
-    cancelled: true;
+export type ImagePickerResult = ImagePickerSuccessResult | ImagePickerCanceledResult;
+/**
+ * Type representing successful pick result.
+ */
+export type ImagePickerSuccessResult = {
+    /**
+     * Boolean flag set to `false` showing that the request was successful.
+     */
+    canceled: false;
+    /**
+     * An array of picked assets.
+     */
+    assets: ImagePickerAsset[];
 };
-export declare type ImagePickerResult = ImagePickerCancelledResult | ImageInfo;
-export declare type ImagePickerMultipleResult = ImagePickerCancelledResult | {
-    cancelled: false;
-    selected: ImageInfo[];
+/**
+ * Type representing canceled pick result.
+ */
+export type ImagePickerCanceledResult = {
+    /**
+     * Boolean flag set to `true` showing that the request was canceled.
+     */
+    canceled: true;
+    /**
+     * `null` signifying that the request was canceled.
+     */
+    assets: null;
 };
-export declare type ImagePickerOptions = {
+/**
+ * @hidden
+ * @deprecated Use `ImagePickerResult` instead.
+ */
+export type ImagePickerCancelledResult = ImagePickerCanceledResult;
+/**
+ * @hidden
+ * @deprecated `ImagePickerMultipleResult` has been deprecated in favor of `ImagePickerResult`.
+ */
+export type ImagePickerMultipleResult = ImagePickerResult;
+export type ImagePickerOptions = {
     /**
      * Whether to show a UI to edit the image after it is picked. On Android the user can crop and
      * rotate the image and on iOS simply crop it.
      *
-     * > Cropping multiple images is not supported - this option is mutually exclusive with `allowsMultipleSelection`.
-     * > On iOS, this option is ignored if `allowsMultipleSelection` is enabled.
+     * > - Cropping multiple images is not supported - this option is mutually exclusive with `allowsMultipleSelection`.
+     * > - On iOS, this option is ignored if `allowsMultipleSelection` is enabled.
+     * > - On iOS cropping a `.bmp` image will convert it to `.png`.
      *
      * @default false
      * @platform ios
@@ -371,6 +398,7 @@ export declare type ImagePickerOptions = {
      * Setting the value to `0` sets the selection limit to the maximum that the system supports.
      *
      * @platform ios 14+
+     * @platform android
      * @default 0
      */
     selectionLimit?: number;
@@ -401,8 +429,24 @@ export declare type ImagePickerOptions = {
      * @platform ios
      */
     presentationStyle?: UIImagePickerPresentationStyle;
+    /**
+     * Selects the camera-facing type. The `CameraType` enum provides two options:
+     * `front` for the front-facing camera and `back` for the back-facing camera.
+     * - **On Android**, the behavior of this option may vary based on the camera app installed on the device.
+     * @default CameraType.back
+     * @platform ios
+     * @platform android
+     */
+    cameraType?: CameraType;
+    /**
+     * Choose [preferred asset representation mode](https://developer.apple.com/documentation/photokit/phpickerconfigurationassetrepresentationmode)
+     * to use when loading assets.
+     * @default ImagePicker.UIImagePickerPreferredAssetRepresentationMode.Automatic
+     * @platform ios 14+
+     */
+    preferredAssetRepresentationMode?: UIImagePickerPreferredAssetRepresentationMode;
 };
-export declare type OpenFileBrowserOptions = {
+export type OpenFileBrowserOptions = {
     /**
      * Choose what type of media to pick.
      * @default ImagePicker.MediaTypeOptions.Images
@@ -419,7 +463,11 @@ export declare type OpenFileBrowserOptions = {
      */
     base64: boolean;
 };
-export declare type ExpandImagePickerResult<T extends ImagePickerOptions | OpenFileBrowserOptions> = T extends {
+/**
+ * @hidden
+ * @deprecated Use `ImagePickerResult` or `OpenFileBrowserOptions` instead.
+ */
+export type ExpandImagePickerResult<T extends ImagePickerOptions | OpenFileBrowserOptions> = T extends {
     allowsMultipleSelection: true;
-} ? ImagePickerMultipleResult : ImagePickerResult;
+} ? ImagePickerResult : ImagePickerResult;
 //# sourceMappingURL=ImagePicker.types.d.ts.map
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ImagePicker.types.d.ts.map b/node_modules/expo-image-picker/build/ImagePicker.types.d.ts.map
index 42b138c..ae48e1e 100644
--- a/node_modules/expo-image-picker/build/ImagePicker.types.d.ts.map
+++ b/node_modules/expo-image-picker/build/ImagePicker.types.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"ImagePicker.types.d.ts","sourceRoot":"","sources":["../src/ImagePicker.types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"ImagePicker.types.d.ts","sourceRoot":"","sources":["../src/ImagePicker.types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ImagePicker.types.js b/node_modules/expo-image-picker/build/ImagePicker.types.js
index bb6c822..146c680 100644
--- a/node_modules/expo-image-picker/build/ImagePicker.types.js
+++ b/node_modules/expo-image-picker/build/ImagePicker.types.js
@@ -154,37 +154,36 @@ export var UIImagePickerPresentationStyle;
      * @platform ios 13+
      */
     UIImagePickerPresentationStyle["AUTOMATIC"] = "automatic";
+})(UIImagePickerPresentationStyle || (UIImagePickerPresentationStyle = {}));
+/**
+ * Picker preferred asset representation mode. Its values are directly mapped to the [`PHPickerConfigurationAssetRepresentationMode`](https://developer.apple.com/documentation/photokit/phpickerconfigurationassetrepresentationmode).
+ *
+ * @platform ios
+ */
+export var UIImagePickerPreferredAssetRepresentationMode;
+(function (UIImagePickerPreferredAssetRepresentationMode) {
     /**
-     * @deprecated Use `UIImagePickerPresentationStyle.FULL_SCREEN` instead.
-     */
-    UIImagePickerPresentationStyle["FullScreen"] = "fullScreen";
-    /**
-     * @deprecated Use `UIImagePickerPresentationStyle.PAGE_SHEET` instead.
-     */
-    UIImagePickerPresentationStyle["PageSheet"] = "pageSheet";
-    /**
-     * @deprecated Use `UIImagePickerPresentationStyle.FORM_SHEET` instead.
-     */
-    UIImagePickerPresentationStyle["FormSheet"] = "formSheet";
-    /**
-     * @deprecated Use `UIImagePickerPresentationStyle.CURRENT_CONTEXT` instead.
+     * A mode that indicates that the system chooses the appropriate asset representation.
      */
-    UIImagePickerPresentationStyle["CurrentContext"] = "currentContext";
+    UIImagePickerPreferredAssetRepresentationMode["Automatic"] = "automatic";
     /**
-     * @deprecated Use `UIImagePickerPresentationStyle.OVER_FULL_SCREEN` instead.
+     * A mode that uses the most compatible asset representation.
      */
-    UIImagePickerPresentationStyle["OverFullScreen"] = "overFullScreen";
+    UIImagePickerPreferredAssetRepresentationMode["Compatible"] = "compatible";
     /**
-     * @deprecated Use `UIImagePickerPresentationStyle.OVER_CURRENT_CONTEXT` instead.
+     * A mode that uses the current representation to avoid transcoding, if possible.
      */
-    UIImagePickerPresentationStyle["OverCurrentContext"] = "overCurrentContext";
+    UIImagePickerPreferredAssetRepresentationMode["Current"] = "current";
+})(UIImagePickerPreferredAssetRepresentationMode || (UIImagePickerPreferredAssetRepresentationMode = {}));
+export var CameraType;
+(function (CameraType) {
     /**
-     * @deprecated Use `UIImagePickerPresentationStyle.POPOVER` instead.
+     * Back/rear camera.
      */
-    UIImagePickerPresentationStyle["Popover"] = "popover";
+    CameraType["back"] = "back";
     /**
-     * @deprecated Use `UIImagePickerPresentationStyle.AUTOMATIC` instead.
+     * Front camera
      */
-    UIImagePickerPresentationStyle["Automatic"] = "automatic";
-})(UIImagePickerPresentationStyle || (UIImagePickerPresentationStyle = {}));
+    CameraType["front"] = "front";
+})(CameraType || (CameraType = {}));
 //# sourceMappingURL=ImagePicker.types.js.map
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/build/ImagePicker.types.js.map b/node_modules/expo-image-picker/build/ImagePicker.types.js.map
index 2b216f3..f826611 100644
--- a/node_modules/expo-image-picker/build/ImagePicker.types.js.map
+++ b/node_modules/expo-image-picker/build/ImagePicker.types.js.map
@@ -1 +1 @@
-{"version":3,"file":"ImagePicker.types.js","sourceRoot":"","sources":["../src/ImagePicker.types.ts"],"names":[],"mappings":"AA0BA,cAAc;AACd,MAAM,CAAN,IAAY,gBAaX;AAbD,WAAY,gBAAgB;IAC1B;;OAEG;IACH,+BAAW,CAAA;IACX;;OAEG;IACH,qCAAiB,CAAA;IACjB;;OAEG;IACH,qCAAiB,CAAA;AACnB,CAAC,EAbW,gBAAgB,KAAhB,gBAAgB,QAa3B;AAED,cAAc;AACd,MAAM,CAAN,IAAY,iBAmEX;AAnED,WAAY,iBAAiB;IAC3B;;;;OAIG;IACH,uEAAe,CAAA;IACf;;;;OAIG;IACH,qEAAc,CAAA;IACd;;;;OAIG;IACH,2EAAiB,CAAA;IACjB;;;;OAIG;IACH,6EAAkB,CAAA;IAClB;;;;OAIG;IACH,yEAAgB,CAAA;IAChB;;;;OAIG;IACH,yEAAgB,CAAA;IAChB;;;;OAIG;IACH,2EAAiB,CAAA;IACjB;;;;OAIG;IACH,6EAAkB,CAAA;IAClB;;;;OAIG;IACH,6EAAkB,CAAA;IAClB;;;;OAIG;IACH,6EAAkB,CAAA;IAClB;;;;OAIG;IACH,8EAAmB,CAAA;AACrB,CAAC,EAnEW,iBAAiB,KAAjB,iBAAiB,QAmE5B;AAED,cAAc;AACd,MAAM,CAAN,IAAY,kCAyBX;AAzBD,WAAY,kCAAkC;IAC5C;;OAEG;IACH,2FAAQ,CAAA;IACR;;OAEG;IACH,+FAAU,CAAA;IACV;;OAEG;IACH,yFAAO,CAAA;IACP;;OAEG;IACH,uGAAc,CAAA;IACd;;OAEG;IACH,+GAAkB,CAAA;IAClB;;OAEG;IACH,6GAAiB,CAAA;AACnB,CAAC,EAzBW,kCAAkC,KAAlC,kCAAkC,QAyB7C;AAED;;;;GAIG;AACH,MAAM,CAAN,IAAY,8BAoEX;AApED,WAAY,8BAA8B;IACxC;;OAEG;IACH,4DAA0B,CAAA;IAC1B;;OAEG;IACH,0DAAwB,CAAA;IACxB;;OAEG;IACH,0DAAwB,CAAA;IACxB;;OAEG;IACH,oEAAkC,CAAA;IAClC;;OAEG;IACH,qEAAmC,CAAA;IACnC;;OAEG;IACH,6EAA2C,CAAA;IAC3C;;OAEG;IACH,qDAAmB,CAAA;IACnB;;;;;OAKG;IACH,yDAAuB,CAAA;IACvB;;OAEG;IACH,2DAAyB,CAAA;IACzB;;OAEG;IACH,yDAAuB,CAAA;IACvB;;OAEG;IACH,yDAAuB,CAAA;IACvB;;OAEG;IACH,mEAAiC,CAAA;IACjC;;OAEG;IACH,mEAAiC,CAAA;IACjC;;OAEG;IACH,2EAAyC,CAAA;IACzC;;OAEG;IACH,qDAAmB,CAAA;IACnB;;OAEG;IACH,yDAAuB,CAAA;AACzB,CAAC,EApEW,8BAA8B,KAA9B,8BAA8B,QAoEzC","sourcesContent":["import { PermissionResponse } from 'expo-modules-core';\n\n// @needsAudit\n/**\n * Alias for `PermissionResponse` type exported by `expo-modules-core`.\n */\nexport type CameraPermissionResponse = PermissionResponse;\n\n// @needsAudit\n/**\n * Extends `PermissionResponse` type exported by `expo-modules-core` and contains additional iOS-specific field.\n */\nexport type MediaLibraryPermissionResponse = PermissionResponse & {\n  /**\n   * @platform ios\n   */\n  accessPrivileges?: 'all' | 'limited' | 'none';\n};\n\n// @needsAudit\n/**\n * An alias for the `MediaLibraryPermissionResponse` object.\n * @deprecated Use `ImagePicker.MediaLibraryPermissionResponse` instead.\n */\nexport type CameraRollPermissionResponse = MediaLibraryPermissionResponse;\n\n// @needsAudit\nexport enum MediaTypeOptions {\n  /**\n   * Images and videos.\n   */\n  All = 'All',\n  /**\n   * Only videos.\n   */\n  Videos = 'Videos',\n  /**\n   * Only images.\n   */\n  Images = 'Images',\n}\n\n// @needsAudit\nexport enum VideoExportPreset {\n  /**\n   * Resolution: __Unchanged__ ‚Ä¢\n   * Video compression: __None__ ‚Ä¢\n   * Audio compression: __None__\n   */\n  Passthrough = 0,\n  /**\n   * Resolution: __Depends on the device__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  LowQuality = 1,\n  /**\n   * Resolution: __Depends on the device__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  MediumQuality = 2,\n  /**\n   * Resolution: __Depends on the device__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  HighestQuality = 3,\n  /**\n   * Resolution: __640 √ó 480__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  H264_640x480 = 4,\n  /**\n   * Resolution: __960 √ó 540__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  H264_960x540 = 5,\n  /**\n   * Resolution: __1280 √ó 720__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  H264_1280x720 = 6,\n  /**\n   * Resolution: __1920 √ó 1080__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  H264_1920x1080 = 7,\n  /**\n   * Resolution: __3840 √ó 2160__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  H264_3840x2160 = 8,\n  /**\n   * Resolution: __1920 √ó 1080__ ‚Ä¢\n   * Video compression: __HEVC__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  HEVC_1920x1080 = 9,\n  /**\n   * Resolution: __3840 √ó 2160__ ‚Ä¢\n   * Video compression: __HEVC__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  HEVC_3840x2160 = 10,\n}\n\n// @needsAudit\nexport enum UIImagePickerControllerQualityType {\n  /**\n   * Highest available resolution.\n   */\n  High = 0,\n  /**\n   * Depends on the device.\n   */\n  Medium = 1,\n  /**\n   * Depends on the device.\n   */\n  Low = 2,\n  /**\n   * 640 √ó 480\n   */\n  VGA640x480 = 3,\n  /**\n   * 1280 √ó 720\n   */\n  IFrame1280x720 = 4,\n  /**\n   * 960 √ó 540\n   */\n  IFrame960x540 = 5,\n}\n\n/**\n * Picker presentation style. Its values are directly mapped to the [`UIModalPresentationStyle`](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621355-modalpresentationstyle).\n *\n * @platform ios\n */\nexport enum UIImagePickerPresentationStyle {\n  /**\n   * A presentation style in which the presented picker covers the screen.\n   */\n  FULL_SCREEN = 'fullScreen',\n  /**\n   * A presentation style that partially covers the underlying content.\n   */\n  PAGE_SHEET = 'pageSheet',\n  /**\n   * A presentation style that displays the picker centered in the screen.\n   */\n  FORM_SHEET = 'formSheet',\n  /**\n   * A presentation style where the picker is displayed over the app's content.\n   */\n  CURRENT_CONTEXT = 'currentContext',\n  /**\n   * A presentation style in which the picker view covers the screen.\n   */\n  OVER_FULL_SCREEN = 'overFullScreen',\n  /**\n   * A presentation style where the picker is displayed over the app's content.\n   */\n  OVER_CURRENT_CONTEXT = 'overCurrentContext',\n  /**\n   * A presentation style where the picker is displayed in a popover view.\n   */\n  POPOVER = 'popover',\n  /**\n   * The default presentation style chosen by the system.\n   * On older iOS versions, falls back to `WebBrowserPresentationStyle.FullScreen`.\n   *\n   * @platform ios 13+\n   */\n  AUTOMATIC = 'automatic',\n  /**\n   * @deprecated Use `UIImagePickerPresentationStyle.FULL_SCREEN` instead.\n   */\n  FullScreen = 'fullScreen',\n  /**\n   * @deprecated Use `UIImagePickerPresentationStyle.PAGE_SHEET` instead.\n   */\n  PageSheet = 'pageSheet',\n  /**\n   * @deprecated Use `UIImagePickerPresentationStyle.FORM_SHEET` instead.\n   */\n  FormSheet = 'formSheet',\n  /**\n   * @deprecated Use `UIImagePickerPresentationStyle.CURRENT_CONTEXT` instead.\n   */\n  CurrentContext = 'currentContext',\n  /**\n   * @deprecated Use `UIImagePickerPresentationStyle.OVER_FULL_SCREEN` instead.\n   */\n  OverFullScreen = 'overFullScreen',\n  /**\n   * @deprecated Use `UIImagePickerPresentationStyle.OVER_CURRENT_CONTEXT` instead.\n   */\n  OverCurrentContext = 'overCurrentContext',\n  /**\n   * @deprecated Use `UIImagePickerPresentationStyle.POPOVER` instead.\n   */\n  Popover = 'popover',\n  /**\n   * @deprecated Use `UIImagePickerPresentationStyle.AUTOMATIC` instead.\n   */\n  Automatic = 'automatic',\n}\n\n// @needsAudit\nexport type ImageInfo = {\n  /**\n   * URI to the local image or video file (usable as the source of an `Image` element, in the case of\n   * an image) and `width` and `height` specify the dimensions of the media.\n   */\n  uri: string;\n  /**\n   * The unique ID that represents the picked image or video, if picked from the library. It can be used\n   * by [expo-media-library](./media-library) to manage the picked asset.\n   *\n   * > This might be `null` when the ID is unavailable or the user gave limited permission to access the media library.\n   * > On Android, the ID is unavailable when the user selects a photo by directly browsing file system.\n   *\n   * @platform ios\n   * @platform android\n   */\n  assetId?: string | null;\n  /**\n   * Width of the image or video.\n   */\n  width: number;\n  /**\n   * Height of the image or video.\n   */\n  height: number;\n  /**\n   * The type of the asset.\n   */\n  type?: 'image' | 'video';\n  /**\n   * Preferred filename to use when saving this item. This might be `null` when the name is unavailable\n   * or user gave limited permission to access the media library.\n   *\n   * @platform ios\n   */\n  fileName?: string | null;\n  /**\n   * File size of the picked image or video, in bytes.\n   *\n   * @platform ios\n   */\n  fileSize?: number;\n  /**\n   * The `exif` field is included if the `exif` option is truthy, and is an object containing the\n   * image's EXIF data. The names of this object's properties are EXIF tags and the values are the\n   * respective EXIF values for those tags.\n   */\n  exif?: Record<string, any>;\n  /**\n   * Included if the `base64` option is truthy, and is a Base64-encoded string of the selected\n   * image's JPEG data. If you prepend this with `'data:image/jpeg;base64,'` to create a data URI,\n   * you can use it as the source of an `Image` element; for example:\n   * ```ts\n   * <Image\n   *   source={{ uri: 'data:image/jpeg;base64,' + launchCameraResult.base64 }}\n   *   style={{ width: 200, height: 200 }}\n   * />\n   * ```\n   */\n  base64?: string;\n  /**\n   * Length of the video in milliseconds.\n   */\n  duration?: number;\n  /**\n   * Boolean flag which shows if request was cancelled. If asset data have been returned this should\n   * always be `false`.\n   */\n  cancelled: boolean;\n};\n\n// @needsAudit\nexport type ImagePickerErrorResult = {\n  /**\n   * The error code.\n   */\n  code: string;\n  /**\n   * The error message.\n   */\n  message: string;\n  /**\n   * The exception which caused the error.\n   */\n  exception?: string;\n};\n\n// @needsAudit\n/**\n * An object returned when the pick action has been cancelled by the user.\n */\nexport type ImagePickerCancelledResult = { cancelled: true };\n\n// @needsAudit\nexport type ImagePickerResult = ImagePickerCancelledResult | ImageInfo;\n\n// @needsAudit @docsMissing\nexport type ImagePickerMultipleResult =\n  | ImagePickerCancelledResult\n  | { cancelled: false; selected: ImageInfo[] };\n\n// @needsAudit\nexport type ImagePickerOptions = {\n  /**\n   * Whether to show a UI to edit the image after it is picked. On Android the user can crop and\n   * rotate the image and on iOS simply crop it.\n   *\n   * > Cropping multiple images is not supported - this option is mutually exclusive with `allowsMultipleSelection`.\n   * > On iOS, this option is ignored if `allowsMultipleSelection` is enabled.\n   *\n   * @default false\n   * @platform ios\n   * @platform android\n   */\n  allowsEditing?: boolean;\n  /**\n   * An array with two entries `[x, y]` specifying the aspect ratio to maintain if the user is\n   * allowed to edit the image (by passing `allowsEditing: true`). This is only applicable on\n   * Android, since on iOS the crop rectangle is always a square.\n   */\n  aspect?: [number, number];\n  /**\n   * Specify the quality of compression, from `0` to `1`. `0` means compress for small size,\n   * `1` means compress for maximum quality.\n   * > Note: If the selected image has been compressed before, the size of the output file may be\n   * > bigger than the size of the original image.\n   *\n   * > Note: On iOS, if a `.bmp` or `.png` image is selected from the library, this option is ignored.\n   *\n   * @default 0.2\n   * @platform ios\n   * @platform android\n   */\n  quality?: number;\n  /**\n   * Choose what type of media to pick.\n   * @default ImagePicker.MediaTypeOptions.Images\n   */\n  mediaTypes?: MediaTypeOptions;\n  /**\n   * Whether to also include the EXIF data for the image. On iOS the EXIF data does not include GPS\n   * tags in the camera case.\n   */\n  exif?: boolean;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64?: boolean;\n  /**\n   * Specify preset which will be used to compress selected video.\n   * @default ImagePicker.VideoExportPreset.Passthrough\n   * @platform ios 11+\n   * @deprecated See [`videoExportPreset`](https://developer.apple.com/documentation/uikit/uiimagepickercontroller/2890964-videoexportpreset?language=objc)\n   * in Apple documentation.\n   */\n  videoExportPreset?: VideoExportPreset;\n  /**\n   * Specify the quality of recorded videos. Defaults to the highest quality available for the device.\n   * @default ImagePicker.UIImagePickerControllerQualityType.High\n   * @platform ios\n   */\n  videoQuality?: UIImagePickerControllerQualityType;\n  /**\n   * Whether or not to allow selecting multiple media files at once.\n   *\n   * > Cropping multiple images is not supported - this option is mutually exclusive with `allowsEditing`.\n   * > If this option is enabled, then `allowsEditing` is ignored.\n   *\n   * @default false\n   * @platform ios 14+\n   * @platform android\n   * @platform web\n   */\n  allowsMultipleSelection?: boolean;\n  /**\n   * The maximum number of items that user can select. Applicable when `allowsMultipleSelection` is enabled.\n   * Setting the value to `0` sets the selection limit to the maximum that the system supports.\n   *\n   * @platform ios 14+\n   * @default 0\n   */\n  selectionLimit?: number;\n  /**\n   * Whether to display number badges when assets are selected. The badges are numbered\n   * in selection order. Assets are then returned in the exact same order they were selected.\n   *\n   * > Assets should be returned in the selection order regardless of this option,\n   * > but there is no guarantee that it is always true when this option is disabled.\n   *\n   * @platform ios 15+\n   * @default false\n   */\n  orderedSelection?: boolean;\n  /**\n   * Maximum duration, in seconds, for video recording. Setting this to `0` disables the limit.\n   * Defaults to `0` (no limit).\n   * - **On iOS**, when `allowsEditing` is set to `true`, maximum duration is limited to 10 minutes.\n   *   This limit is applied automatically, if `0` or no value is specified.\n   * - **On Android**, effect of this option depends on support of installed camera app.\n   * - **On Web** this option has no effect - the limit is browser-dependant.\n   */\n  videoMaxDuration?: number;\n  /**\n   * Choose [presentation style](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621355-modalpresentationstyle?language=objc)\n   * to customize view during taking photo/video.\n   * @default ImagePicker.UIImagePickerPresentationStyle.Automatic\n   * @platform ios\n   */\n  presentationStyle?: UIImagePickerPresentationStyle;\n};\n\n// @needsAudit\nexport type OpenFileBrowserOptions = {\n  /**\n   * Choose what type of media to pick.\n   * @default ImagePicker.MediaTypeOptions.Images\n   */\n  mediaTypes: MediaTypeOptions;\n  // @docsMissing\n  capture?: boolean;\n  /**\n   * Whether or not to allow selecting multiple media files at once.\n   * @platform web\n   */\n  allowsMultipleSelection: boolean;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64: boolean;\n};\n\n// @needsAudit @docsMissing\nexport type ExpandImagePickerResult<T extends ImagePickerOptions | OpenFileBrowserOptions> =\n  T extends {\n    allowsMultipleSelection: true;\n  }\n    ? ImagePickerMultipleResult\n    : ImagePickerResult;\n"]}
\ No newline at end of file
+{"version":3,"file":"ImagePicker.types.js","sourceRoot":"","sources":["../src/ImagePicker.types.ts"],"names":[],"mappings":"AAmBA,cAAc;AACd,MAAM,CAAN,IAAY,gBAaX;AAbD,WAAY,gBAAgB;IAC1B;;OAEG;IACH,+BAAW,CAAA;IACX;;OAEG;IACH,qCAAiB,CAAA;IACjB;;OAEG;IACH,qCAAiB,CAAA;AACnB,CAAC,EAbW,gBAAgB,KAAhB,gBAAgB,QAa3B;AAED,cAAc;AACd,MAAM,CAAN,IAAY,iBAmEX;AAnED,WAAY,iBAAiB;IAC3B;;;;OAIG;IACH,uEAAe,CAAA;IACf;;;;OAIG;IACH,qEAAc,CAAA;IACd;;;;OAIG;IACH,2EAAiB,CAAA;IACjB;;;;OAIG;IACH,6EAAkB,CAAA;IAClB;;;;OAIG;IACH,yEAAgB,CAAA;IAChB;;;;OAIG;IACH,yEAAgB,CAAA;IAChB;;;;OAIG;IACH,2EAAiB,CAAA;IACjB;;;;OAIG;IACH,6EAAkB,CAAA;IAClB;;;;OAIG;IACH,6EAAkB,CAAA;IAClB;;;;OAIG;IACH,6EAAkB,CAAA;IAClB;;;;OAIG;IACH,8EAAmB,CAAA;AACrB,CAAC,EAnEW,iBAAiB,KAAjB,iBAAiB,QAmE5B;AAED,cAAc;AACd,MAAM,CAAN,IAAY,kCAyBX;AAzBD,WAAY,kCAAkC;IAC5C;;OAEG;IACH,2FAAQ,CAAA;IACR;;OAEG;IACH,+FAAU,CAAA;IACV;;OAEG;IACH,yFAAO,CAAA;IACP;;OAEG;IACH,uGAAc,CAAA;IACd;;OAEG;IACH,+GAAkB,CAAA;IAClB;;OAEG;IACH,6GAAiB,CAAA;AACnB,CAAC,EAzBW,kCAAkC,KAAlC,kCAAkC,QAyB7C;AAED;;;;GAIG;AACH,MAAM,CAAN,IAAY,8BAoCX;AApCD,WAAY,8BAA8B;IACxC;;OAEG;IACH,4DAA0B,CAAA;IAC1B;;OAEG;IACH,0DAAwB,CAAA;IACxB;;OAEG;IACH,0DAAwB,CAAA;IACxB;;OAEG;IACH,oEAAkC,CAAA;IAClC;;OAEG;IACH,qEAAmC,CAAA;IACnC;;OAEG;IACH,6EAA2C,CAAA;IAC3C;;OAEG;IACH,qDAAmB,CAAA;IACnB;;;;;OAKG;IACH,yDAAuB,CAAA;AACzB,CAAC,EApCW,8BAA8B,KAA9B,8BAA8B,QAoCzC;AAED;;;;GAIG;AACH,MAAM,CAAN,IAAY,6CAaX;AAbD,WAAY,6CAA6C;IACvD;;OAEG;IACH,wEAAuB,CAAA;IACvB;;OAEG;IACH,0EAAyB,CAAA;IACzB;;OAEG;IACH,oEAAmB,CAAA;AACrB,CAAC,EAbW,6CAA6C,KAA7C,6CAA6C,QAaxD;AAED,MAAM,CAAN,IAAY,UASX;AATD,WAAY,UAAU;IACpB;;OAEG;IACH,2BAAa,CAAA;IACb;;OAEG;IACH,6BAAe,CAAA;AACjB,CAAC,EATW,UAAU,KAAV,UAAU,QASrB","sourcesContent":["import { PermissionResponse } from 'expo-modules-core';\n\n// @needsAudit\n/**\n * Alias for `PermissionResponse` type exported by `expo-modules-core`.\n */\nexport type CameraPermissionResponse = PermissionResponse;\n\n// @needsAudit\n/**\n * Extends `PermissionResponse` type exported by `expo-modules-core`, containing additional iOS-specific field.\n */\nexport type MediaLibraryPermissionResponse = PermissionResponse & {\n  /**\n   * @platform ios\n   */\n  accessPrivileges?: 'all' | 'limited' | 'none';\n};\n\n// @needsAudit\nexport enum MediaTypeOptions {\n  /**\n   * Images and videos.\n   */\n  All = 'All',\n  /**\n   * Only videos.\n   */\n  Videos = 'Videos',\n  /**\n   * Only images.\n   */\n  Images = 'Images',\n}\n\n// @needsAudit\nexport enum VideoExportPreset {\n  /**\n   * Resolution: __Unchanged__ ‚Ä¢\n   * Video compression: __None__ ‚Ä¢\n   * Audio compression: __None__\n   */\n  Passthrough = 0,\n  /**\n   * Resolution: __Depends on the device__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  LowQuality = 1,\n  /**\n   * Resolution: __Depends on the device__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  MediumQuality = 2,\n  /**\n   * Resolution: __Depends on the device__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  HighestQuality = 3,\n  /**\n   * Resolution: __640 √ó 480__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  H264_640x480 = 4,\n  /**\n   * Resolution: __960 √ó 540__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  H264_960x540 = 5,\n  /**\n   * Resolution: __1280 √ó 720__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  H264_1280x720 = 6,\n  /**\n   * Resolution: __1920 √ó 1080__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  H264_1920x1080 = 7,\n  /**\n   * Resolution: __3840 √ó 2160__ ‚Ä¢\n   * Video compression: __H.264__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  H264_3840x2160 = 8,\n  /**\n   * Resolution: __1920 √ó 1080__ ‚Ä¢\n   * Video compression: __HEVC__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  HEVC_1920x1080 = 9,\n  /**\n   * Resolution: __3840 √ó 2160__ ‚Ä¢\n   * Video compression: __HEVC__ ‚Ä¢\n   * Audio compression: __AAC__\n   */\n  HEVC_3840x2160 = 10,\n}\n\n// @needsAudit\nexport enum UIImagePickerControllerQualityType {\n  /**\n   * Highest available resolution.\n   */\n  High = 0,\n  /**\n   * Depends on the device.\n   */\n  Medium = 1,\n  /**\n   * Depends on the device.\n   */\n  Low = 2,\n  /**\n   * 640 √ó 480\n   */\n  VGA640x480 = 3,\n  /**\n   * 1280 √ó 720\n   */\n  IFrame1280x720 = 4,\n  /**\n   * 960 √ó 540\n   */\n  IFrame960x540 = 5,\n}\n\n/**\n * Picker presentation style. Its values are directly mapped to the [`UIModalPresentationStyle`](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621355-modalpresentationstyle).\n *\n * @platform ios\n */\nexport enum UIImagePickerPresentationStyle {\n  /**\n   * A presentation style in which the presented picker covers the screen.\n   */\n  FULL_SCREEN = 'fullScreen',\n  /**\n   * A presentation style that partially covers the underlying content.\n   */\n  PAGE_SHEET = 'pageSheet',\n  /**\n   * A presentation style that displays the picker centered in the screen.\n   */\n  FORM_SHEET = 'formSheet',\n  /**\n   * A presentation style where the picker is displayed over the app's content.\n   */\n  CURRENT_CONTEXT = 'currentContext',\n  /**\n   * A presentation style in which the picker view covers the screen.\n   */\n  OVER_FULL_SCREEN = 'overFullScreen',\n  /**\n   * A presentation style where the picker is displayed over the app's content.\n   */\n  OVER_CURRENT_CONTEXT = 'overCurrentContext',\n  /**\n   * A presentation style where the picker is displayed in a popover view.\n   */\n  POPOVER = 'popover',\n  /**\n   * The default presentation style chosen by the system.\n   * On older iOS versions, falls back to `WebBrowserPresentationStyle.FullScreen`.\n   *\n   * @platform ios 13+\n   */\n  AUTOMATIC = 'automatic',\n}\n\n/**\n * Picker preferred asset representation mode. Its values are directly mapped to the [`PHPickerConfigurationAssetRepresentationMode`](https://developer.apple.com/documentation/photokit/phpickerconfigurationassetrepresentationmode).\n *\n * @platform ios\n */\nexport enum UIImagePickerPreferredAssetRepresentationMode {\n  /**\n   * A mode that indicates that the system chooses the appropriate asset representation.\n   */\n  Automatic = 'automatic',\n  /**\n   * A mode that uses the most compatible asset representation.\n   */\n  Compatible = 'compatible',\n  /**\n   * A mode that uses the current representation to avoid transcoding, if possible.\n   */\n  Current = 'current',\n}\n\nexport enum CameraType {\n  /**\n   * Back/rear camera.\n   */\n  back = 'back',\n  /**\n   * Front camera\n   */\n  front = 'front',\n}\n\n/**\n * @hidden\n * @deprecated Use `ImagePickerAsset` instead\n */\nexport type ImageInfo = ImagePickerAsset;\n\n/**\n * Represents an asset (image or video) returned by the image picker or camera.\n */\nexport type ImagePickerAsset = {\n  /**\n   * URI to the local image or video file (usable as the source of an `Image` element, in the case of\n   * an image) and `width` and `height` specify the dimensions of the media.\n   */\n  uri: string;\n  /**\n   * The unique ID that represents the picked image or video, if picked from the library. It can be used\n   * by [expo-media-library](./media-library) to manage the picked asset.\n   *\n   * > This might be `null` when the ID is unavailable or the user gave limited permission to access the media library.\n   * > On Android, the ID is unavailable when the user selects a photo by directly browsing file system.\n   *\n   * @platform ios\n   * @platform android\n   */\n  assetId?: string | null;\n  /**\n   * Width of the image or video.\n   */\n  width: number;\n  /**\n   * Height of the image or video.\n   */\n  height: number;\n  /**\n   * The type of the asset.\n   */\n  type?: 'image' | 'video';\n  /**\n   * Preferred filename to use when saving this item. This might be `null` when the name is unavailable\n   * or user gave limited permission to access the media library.\n   *\n   */\n  fileName?: string | null;\n  /**\n   * File size of the picked image or video, in bytes.\n   *\n   */\n  fileSize?: number;\n  /**\n   * The `exif` field is included if the `exif` option is truthy, and is an object containing the\n   * image's EXIF data. The names of this object's properties are EXIF tags and the values are the\n   * respective EXIF values for those tags.\n   */\n  exif?: Record<string, any> | null;\n  /**\n   * When the `base64` option is truthy, it is a Base64-encoded string of the selected image's JPEG data, otherwise `null`.\n   * If you prepend this with `'data:image/jpeg;base64,'` to create a data URI,\n   * you can use it as the source of an `Image` element; for example:\n   * ```ts\n   * <Image\n   *   source={{ uri: 'data:image/jpeg;base64,' + asset.base64 }}\n   *   style={{ width: 200, height: 200 }}\n   * />\n   * ```\n   */\n  base64?: string | null;\n  /**\n   * Length of the video in milliseconds or `null` if the asset is not a video.\n   */\n  duration?: number | null;\n  /**\n   * The MIME type of the selected asset or `null` if could not be determined.\n   */\n  mimeType?: string;\n};\n\n// @needsAudit\nexport type ImagePickerErrorResult = {\n  /**\n   * The error code.\n   */\n  code: string;\n  /**\n   * The error message.\n   */\n  message: string;\n  /**\n   * The exception which caused the error.\n   */\n  exception?: string;\n};\n\n// @needsAudit\n/**\n * Type representing successful and canceled pick result.\n */\nexport type ImagePickerResult = ImagePickerSuccessResult | ImagePickerCanceledResult;\n\n/**\n * Type representing successful pick result.\n */\nexport type ImagePickerSuccessResult = {\n  /**\n   * Boolean flag set to `false` showing that the request was successful.\n   */\n  canceled: false;\n  /**\n   * An array of picked assets.\n   */\n  assets: ImagePickerAsset[];\n};\n\n/**\n * Type representing canceled pick result.\n */\nexport type ImagePickerCanceledResult = {\n  /**\n   * Boolean flag set to `true` showing that the request was canceled.\n   */\n  canceled: true;\n  /**\n   * `null` signifying that the request was canceled.\n   */\n  assets: null;\n};\n\n/**\n * @hidden\n * @deprecated Use `ImagePickerResult` instead.\n */\nexport type ImagePickerCancelledResult = ImagePickerCanceledResult;\n\n/**\n * @hidden\n * @deprecated `ImagePickerMultipleResult` has been deprecated in favor of `ImagePickerResult`.\n */\nexport type ImagePickerMultipleResult = ImagePickerResult;\n\n// @needsAudit\nexport type ImagePickerOptions = {\n  /**\n   * Whether to show a UI to edit the image after it is picked. On Android the user can crop and\n   * rotate the image and on iOS simply crop it.\n   *\n   * > - Cropping multiple images is not supported - this option is mutually exclusive with `allowsMultipleSelection`.\n   * > - On iOS, this option is ignored if `allowsMultipleSelection` is enabled.\n   * > - On iOS cropping a `.bmp` image will convert it to `.png`.\n   *\n   * @default false\n   * @platform ios\n   * @platform android\n   */\n  allowsEditing?: boolean;\n  /**\n   * An array with two entries `[x, y]` specifying the aspect ratio to maintain if the user is\n   * allowed to edit the image (by passing `allowsEditing: true`). This is only applicable on\n   * Android, since on iOS the crop rectangle is always a square.\n   */\n  aspect?: [number, number];\n  /**\n   * Specify the quality of compression, from `0` to `1`. `0` means compress for small size,\n   * `1` means compress for maximum quality.\n   * > Note: If the selected image has been compressed before, the size of the output file may be\n   * > bigger than the size of the original image.\n   *\n   * > Note: On iOS, if a `.bmp` or `.png` image is selected from the library, this option is ignored.\n   *\n   * @default 0.2\n   * @platform ios\n   * @platform android\n   */\n  quality?: number;\n  /**\n   * Choose what type of media to pick.\n   * @default ImagePicker.MediaTypeOptions.Images\n   */\n  mediaTypes?: MediaTypeOptions;\n  /**\n   * Whether to also include the EXIF data for the image. On iOS the EXIF data does not include GPS\n   * tags in the camera case.\n   */\n  exif?: boolean;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64?: boolean;\n  /**\n   * Specify preset which will be used to compress selected video.\n   * @default ImagePicker.VideoExportPreset.Passthrough\n   * @platform ios 11+\n   * @deprecated See [`videoExportPreset`](https://developer.apple.com/documentation/uikit/uiimagepickercontroller/2890964-videoexportpreset?language=objc)\n   * in Apple documentation.\n   */\n  videoExportPreset?: VideoExportPreset;\n  /**\n   * Specify the quality of recorded videos. Defaults to the highest quality available for the device.\n   * @default ImagePicker.UIImagePickerControllerQualityType.High\n   * @platform ios\n   */\n  videoQuality?: UIImagePickerControllerQualityType;\n  /**\n   * Whether or not to allow selecting multiple media files at once.\n   *\n   * > Cropping multiple images is not supported - this option is mutually exclusive with `allowsEditing`.\n   * > If this option is enabled, then `allowsEditing` is ignored.\n   *\n   * @default false\n   * @platform ios 14+\n   * @platform android\n   * @platform web\n   */\n  allowsMultipleSelection?: boolean;\n  /**\n   * The maximum number of items that user can select. Applicable when `allowsMultipleSelection` is enabled.\n   * Setting the value to `0` sets the selection limit to the maximum that the system supports.\n   *\n   * @platform ios 14+\n   * @platform android\n   * @default 0\n   */\n  selectionLimit?: number;\n  /**\n   * Whether to display number badges when assets are selected. The badges are numbered\n   * in selection order. Assets are then returned in the exact same order they were selected.\n   *\n   * > Assets should be returned in the selection order regardless of this option,\n   * > but there is no guarantee that it is always true when this option is disabled.\n   *\n   * @platform ios 15+\n   * @default false\n   */\n  orderedSelection?: boolean;\n  /**\n   * Maximum duration, in seconds, for video recording. Setting this to `0` disables the limit.\n   * Defaults to `0` (no limit).\n   * - **On iOS**, when `allowsEditing` is set to `true`, maximum duration is limited to 10 minutes.\n   *   This limit is applied automatically, if `0` or no value is specified.\n   * - **On Android**, effect of this option depends on support of installed camera app.\n   * - **On Web** this option has no effect - the limit is browser-dependant.\n   */\n  videoMaxDuration?: number;\n  /**\n   * Choose [presentation style](https://developer.apple.com/documentation/uikit/uiviewcontroller/1621355-modalpresentationstyle?language=objc)\n   * to customize view during taking photo/video.\n   * @default ImagePicker.UIImagePickerPresentationStyle.Automatic\n   * @platform ios\n   */\n  presentationStyle?: UIImagePickerPresentationStyle;\n  /**\n   * Selects the camera-facing type. The `CameraType` enum provides two options:\n   * `front` for the front-facing camera and `back` for the back-facing camera.\n   * - **On Android**, the behavior of this option may vary based on the camera app installed on the device.\n   * @default CameraType.back\n   * @platform ios\n   * @platform android\n   */\n  cameraType?: CameraType;\n  /**\n   * Choose [preferred asset representation mode](https://developer.apple.com/documentation/photokit/phpickerconfigurationassetrepresentationmode)\n   * to use when loading assets.\n   * @default ImagePicker.UIImagePickerPreferredAssetRepresentationMode.Automatic\n   * @platform ios 14+\n   */\n  preferredAssetRepresentationMode?: UIImagePickerPreferredAssetRepresentationMode;\n};\n\n// @needsAudit\nexport type OpenFileBrowserOptions = {\n  /**\n   * Choose what type of media to pick.\n   * @default ImagePicker.MediaTypeOptions.Images\n   */\n  mediaTypes: MediaTypeOptions;\n  // @docsMissing\n  capture?: boolean;\n  /**\n   * Whether or not to allow selecting multiple media files at once.\n   * @platform web\n   */\n  allowsMultipleSelection: boolean;\n  /**\n   * Whether to also include the image data in Base64 format.\n   */\n  base64: boolean;\n};\n\n/**\n * @hidden\n * @deprecated Use `ImagePickerResult` or `OpenFileBrowserOptions` instead.\n */\nexport type ExpandImagePickerResult<T extends ImagePickerOptions | OpenFileBrowserOptions> =\n  T extends {\n    allowsMultipleSelection: true;\n  }\n    ? ImagePickerResult\n    : ImagePickerResult;\n"]}
\ No newline at end of file
diff --git a/node_modules/expo-image-picker/ios/ExpoImagePicker.podspec b/node_modules/expo-image-picker/ios/ExpoImagePicker.podspec
index 5f142e9..20f58e1 100644
--- a/node_modules/expo-image-picker/ios/ExpoImagePicker.podspec
+++ b/node_modules/expo-image-picker/ios/ExpoImagePicker.podspec
@@ -10,7 +10,7 @@ Pod::Spec.new do |s|
   s.license        = package['license']
   s.author         = package['author']
   s.homepage       = package['homepage']
-  s.platform       = :ios, '12.0'
+  s.platform       = :ios, '13.4'
   s.swift_version  = '5.4'
   s.source         = { git: 'https://github.com/expo/expo.git' }
   s.static_framework = true
diff --git a/node_modules/expo-image-picker/ios/ImagePickerHandler.swift b/node_modules/expo-image-picker/ios/ImagePickerHandler.swift
index 238f0e3..f7e98c3 100644
--- a/node_modules/expo-image-picker/ios/ImagePickerHandler.swift
+++ b/node_modules/expo-image-picker/ios/ImagePickerHandler.swift
@@ -75,7 +75,7 @@ internal class ImagePickerHandler: NSObject,
   func picker(_ picker: PHPickerViewController, didFinishPicking results: [PHPickerResult]) {
     DispatchQueue.main.async {
       picker.dismiss(animated: true) { [weak self] in
-        // The PHPickerViewController returns empty collection when cancelled
+        // The PHPickerViewController returns empty collection when canceled
         if results.isEmpty {
           self?.handlePickingCancellation()
         } else {
diff --git a/node_modules/expo-image-picker/ios/ImagePickerModule.swift b/node_modules/expo-image-picker/ios/ImagePickerModule.swift
index cc94f67..999b242 100644
--- a/node_modules/expo-image-picker/ios/ImagePickerModule.swift
+++ b/node_modules/expo-image-picker/ios/ImagePickerModule.swift
@@ -91,7 +91,7 @@ public class ImagePickerModule: Module, OnMediaPickingResultHandler {
                                         options: options,
                                         imagePickerHandler: imagePickerDelegate)
 
-    if #available(iOS 14, *), options.allowsMultipleSelection && sourceType != .camera {
+    if #available(iOS 14, *), !options.allowsEditing && sourceType != .camera {
       self.launchMultiSelectPicker(pickingContext: pickingContext)
     } else {
       self.launchLegacyImagePicker(sourceType: sourceType, pickingContext: pickingContext)
@@ -102,6 +102,7 @@ public class ImagePickerModule: Module, OnMediaPickingResultHandler {
     let options = pickingContext.options
 
     let picker = UIImagePickerController()
+    picker.fixCannotMoveEditingBox()
 
     if sourceType == .camera {
 #if targetEnvironment(simulator)
@@ -139,8 +140,12 @@ public class ImagePickerModule: Module, OnMediaPickingResultHandler {
     var configuration = PHPickerConfiguration(photoLibrary: PHPhotoLibrary.shared())
     let options = pickingContext.options
 
-    configuration.selectionLimit = options.selectionLimit
+    // selection limit = 1 --> single selection, reflects the old picker behavior
+    configuration.selectionLimit = options.allowsMultipleSelection ? options.selectionLimit : SINGLE_SELECTION
     configuration.filter = options.mediaTypes.toPickerFilter()
+    if #available(iOS 14, *) {
+      configuration.preferredAssetRepresentationMode = options.preferredAssetRepresentationMode.toAssetRepresentationMode()
+    }
     if #available(iOS 15, *) {
       configuration.selection = options.orderedSelection ? .ordered : .default
     }
@@ -166,7 +171,7 @@ public class ImagePickerModule: Module, OnMediaPickingResultHandler {
   // MARK: - OnMediaPickingResultHandler
 
   func didCancelPicking() {
-    self.currentPickingContext?.promise.resolve(["cancelled": true])
+    self.currentPickingContext?.promise.resolve(ImagePickerResponse(assets: nil, canceled: true))
     self.currentPickingContext = nil
   }
 
@@ -190,7 +195,7 @@ public class ImagePickerModule: Module, OnMediaPickingResultHandler {
     mediaHandler.handleMultipleMedia(selection) { result -> Void in
       switch result {
       case .failure(let error): return promise.reject(error)
-      case .success(let response): return promise.resolve(response.dictionary)
+      case .success(let response): return promise.resolve(response)
       }
     }
   }
@@ -213,7 +218,7 @@ public class ImagePickerModule: Module, OnMediaPickingResultHandler {
     mediaHandler.handleMedia(mediaInfo) { result -> Void in
       switch result {
       case .failure(let error): return promise.reject(error)
-      case .success(let response): return promise.resolve(response.dictionary)
+      case .success(let response): return promise.resolve(response)
       }
     }
   }
diff --git a/node_modules/expo-image-picker/ios/ImagePickerOptions.swift b/node_modules/expo-image-picker/ios/ImagePickerOptions.swift
index adb10c7..5e149e4 100644
--- a/node_modules/expo-image-picker/ios/ImagePickerOptions.swift
+++ b/node_modules/expo-image-picker/ios/ImagePickerOptions.swift
@@ -5,7 +5,10 @@ import MobileCoreServices
 import PhotosUI
 
 internal let DEFAULT_QUALITY = 0.2
+internal let MAXIMUM_QUALITY = 1.0
+
 internal let UNLIMITED_SELECTION = 0
+internal let SINGLE_SELECTION = 1
 
 internal struct ImagePickerOptions: Record {
   @Field
@@ -38,7 +41,9 @@ internal struct ImagePickerOptions: Record {
   @Field
   var presentationStyle: PresentationStyle = .automatic
 
-  // TODO: (bbarthec): undocumented
+  @Field
+  var preferredAssetRepresentationMode: PreferredAssetRepresentationMode = .automatic
+
   @Field
   var cameraType: CameraType = .back
 
@@ -91,6 +96,24 @@ internal enum PresentationStyle: String, EnumArgument {
   }
 }
 
+internal enum PreferredAssetRepresentationMode: String, EnumArgument {
+  case automatic
+  case compatible
+  case current
+
+  @available(iOS 14.0, *)
+  func toAssetRepresentationMode() -> PHPickerConfiguration.AssetRepresentationMode {
+    switch self {
+    case .automatic:
+      return .automatic
+    case .compatible:
+      return .compatible
+    case .current:
+      return .current
+    }
+  }
+}
+
 internal enum VideoQuality: Int, EnumArgument {
   case typeHigh = 0
   case typeMedium = 1
diff --git a/node_modules/expo-image-picker/ios/ImagePickerResponse.swift b/node_modules/expo-image-picker/ios/ImagePickerResponse.swift
index e8cbda3..6d847ca 100644
--- a/node_modules/expo-image-picker/ios/ImagePickerResponse.swift
+++ b/node_modules/expo-image-picker/ios/ImagePickerResponse.swift
@@ -1,51 +1,15 @@
 // Copyright 2022-present 650 Industries. All rights reserved.
 
+// swiftlint:disable redundant_optional_initialization
+// Unfortunately, property wrappers must be initialized in those records, otherwise the memberwise initializer
+// would require `Field<FieldType?>` as an argument instead of `FieldType?`.
+// TODO: (@tsapeta) Figure out if we can fix that
+
 import ExpoModulesCore
 
 internal typealias ImagePickerResult = Result<ImagePickerResponse, Exception>
 
-internal typealias SelectedMediaResult = Result<SelectedMediaInfo, Exception>
-
-/**
- General protocol representing a picker response
- */
-internal protocol ImagePickerResponse {
-  var dictionary: [String: Any] { get }
-}
-
-/**
- Represents a picker response, when multiple selection is disabled
- */
-internal enum ImagePickerSingleResponse: ImagePickerResponse {
-  case image(ImageInfo)
-  case video(VideoInfo)
-
-  var dictionary: [String: Any] {
-    var result: [String: Any] = [:]
-    switch self {
-    case .video(let videoInfo):
-      result = videoInfo.dictionary
-    case .image(let imageImage):
-      result = imageImage.dictionary
-    }
-    result["cancelled"] = false
-    return result
-  }
-}
-
-/**
- Represents a picker response, when multiple selection is enabled
- */
-internal struct ImagePickerMultipleResponse: ImagePickerResponse {
-  let results: [SelectedMediaInfo]
-
-  var dictionary: [String: Any] {
-    [
-      "cancelled": false,
-      "selected": results.map { $0.dictionary }
-    ]
-  }
-}
+internal typealias SelectedMediaResult = Result<AssetInfo, Exception>
 
 /**
  Convenience alias, a dictionary representing EXIF data
@@ -53,69 +17,26 @@ internal struct ImagePickerMultipleResponse: ImagePickerResponse {
 internal typealias ExifInfo = [String: Any]
 
 /**
- General protocol representing a single selected asset
- */
-internal protocol SelectedMediaInfo {
-  var dictionary: [String: Any] { get }
-}
-
-/**
- Represents a single selected image
+ Represents a picker response.
  */
-internal struct ImageInfo: SelectedMediaInfo {
-  let assetId: String?
-  let type: String = "image"
-  let uri: String
-  let width: Double
-  let height: Double
-  let fileName: String?
-  let fileSize: Int?
-  let base64: String?
-  let exif: ExifInfo?
-
-  var dictionary: [String: Any] {
-    var result: [String: Any] = [
-      "type": type,
-      "uri": uri,
-      "assetId": assetId,
-      "width": width,
-      "height": height,
-      "fileName": fileName,
-      "fileSize": fileSize
-    ]
-    if base64 != nil {
-      result["base64"] = base64
-    }
-    if exif != nil {
-      result["exif"] = exif
-    }
-    return result
-  }
+internal struct ImagePickerResponse: Record {
+  @Field var assets: [AssetInfo]? = nil
+  @Field var canceled: Bool = true
 }
 
 /**
- Represents a single selected video
+ Represents a single asset (image or video).
  */
-internal struct VideoInfo: SelectedMediaInfo {
-  let assetId: String?
-  let type: String = "video"
-  let uri: String
-  let width: Double
-  let height: Double
-  let fileName: String?
-  let fileSize: Int?
-  let duration: Double
-
-  var dictionary: [String: Any] {
-    [
-      "type": type,
-      "uri": uri,
-      "assetId": assetId,
-      "width": width,
-      "height": height,
-      "fileName": fileName,
-      "fileSize": fileSize,
-      "duration": duration
-    ]
-  }
+internal struct AssetInfo: Record {
+  @Field var assetId: String? = nil
+  @Field var type: String = "image"
+  @Field var uri: String = ""
+  @Field var width: Double = 0
+  @Field var height: Double = 0
+  @Field var fileName: String? = nil
+  @Field var fileSize: Int? = nil
+  @Field var mimeType: String? = nil
+  @Field var base64: String? = nil
+  @Field var exif: ExifInfo? = nil
+  @Field var duration: Double? = nil
 }
diff --git a/node_modules/expo-image-picker/ios/MediaHandler.swift b/node_modules/expo-image-picker/ios/MediaHandler.swift
index 88a5639..8644c86 100644
--- a/node_modules/expo-image-picker/ios/MediaHandler.swift
+++ b/node_modules/expo-image-picker/ios/MediaHandler.swift
@@ -23,7 +23,7 @@ internal struct MediaHandler {
 
   @available(iOS 14, *)
   internal func handleMultipleMedia(_ selection: [PHPickerResult], completion: @escaping (ImagePickerResult) -> Void) {
-    var results = Array<SelectedMediaInfo?>(repeating: nil, count: selection.count)
+    var results = [AssetInfo?](repeating: nil, count: selection.count)
 
     let dispatchGroup = DispatchGroup()
     let dispatchQueue = DispatchQueue(label: "expo.imagepicker.multipleMediaHandler")
@@ -54,7 +54,9 @@ internal struct MediaHandler {
     }
 
     dispatchGroup.notify(queue: .main) {
-      completion(.success(ImagePickerMultipleResponse(results: results.compactMap { $0 } )))
+      completion(.success(
+        ImagePickerResponse(assets: results.compactMap({ $0 }), canceled: false)
+      ))
     }
   }
 
@@ -72,6 +74,7 @@ internal struct MediaHandler {
                                                                                options: options)
 
       let targetUrl = try generateUrl(withFileExtension: fileExtension)
+      let mimeType = getMimeType(from: ".\(targetUrl.pathExtension)")
 
       // no modification requested
       let imageModified = options.allowsEditing || options.quality != nil
@@ -83,7 +86,11 @@ internal struct MediaHandler {
       // as calling this already requires media library permission, we can access it here
       // if user gave limited permissions, in the worst case this will be null
       let asset = mediaInfo[.phAsset] as? PHAsset
-      let fileName = asset?.value(forKey: "filename") as? String
+      var fileName = asset?.value(forKey: "filename") as? String
+      // Extension will change to png when editing BMP files, reflect that change in fileName
+      if let unwrappedName = fileName {
+        fileName = replaceFileExtension(fileName: unwrappedName, targetExtension: fileExtension.lowercased())
+      }
       let fileSize = getFileSize(from: targetUrl)
 
       let base64 = try ImageUtils.optionallyReadBase64From(imageData: imageData,
@@ -92,15 +99,17 @@ internal struct MediaHandler {
                                                            shouldReadBase64: self.options.base64)
 
       ImageUtils.optionallyReadExifFrom(mediaInfo: mediaInfo, shouldReadExif: self.options.exif) { exif in
-        let result: ImagePickerSingleResponse = .image(ImageInfo(assetId: asset?.localIdentifier,
-                                                                 uri: targetUrl.absoluteString,
-                                                                 width: image.size.width,
-                                                                 height: image.size.height,
-                                                                 fileName: fileName,
-                                                                 fileSize: fileSize,
-                                                                 base64: base64,
-                                                                 exif: exif))
-        completion(.success(result))
+        let imageInfo = AssetInfo(assetId: asset?.localIdentifier,
+                                  uri: targetUrl.absoluteString,
+                                  width: image.size.width,
+                                  height: image.size.height,
+                                  fileName: fileName,
+                                  fileSize: fileSize,
+                                  mimeType: mimeType,
+                                  base64: base64,
+                                  exif: exif)
+        let response = ImagePickerResponse(assets: [imageInfo], canceled: false)
+        completion(.success(response))
       }
     } catch let exception as Exception {
       return completion(.failure(exception))
@@ -123,9 +132,11 @@ internal struct MediaHandler {
         }
 
         let (imageData, fileExtension) = try ImageUtils.readDataAndFileExtension(image: image,
+                                                                                 rawData: rawData,
                                                                                  itemProvider: itemProvider,
                                                                                  options: self.options)
 
+        let mimeType = getMimeType(from: fileExtension)
         let targetUrl = try generateUrl(withFileExtension: fileExtension)
         try ImageUtils.write(imageData: imageData, to: targetUrl)
         let fileSize = getFileSize(from: targetUrl)
@@ -139,15 +150,16 @@ internal struct MediaHandler {
                                                              tryReadingFile: false,
                                                              shouldReadBase64: self.options.base64)
 
-        let result = ImageInfo(assetId: selectedImage.assetIdentifier,
-                               uri: targetUrl.absoluteString,
-                               width: image.size.width,
-                               height: image.size.height,
-                               fileName: fileName,
-                               fileSize: fileSize,
-                               base64: base64,
-                               exif: exif)
-        completion(index, .success(result))
+        let imageInfo = AssetInfo(assetId: selectedImage.assetIdentifier,
+                                  uri: targetUrl.absoluteString,
+                                  width: image.size.width,
+                                  height: image.size.height,
+                                  fileName: fileName,
+                                  fileSize: fileSize,
+                                  mimeType: mimeType,
+                                  base64: base64,
+                                  exif: exif)
+        completion(index, .success(imageInfo))
       } catch let exception as Exception {
         return completion(index, .failure(exception))
       } catch {
@@ -156,6 +168,22 @@ internal struct MediaHandler {
     } // loadObject
   }
 
+  private func getMimeType(from pathExtension: String) -> String? {
+    let filenameExtension = String(pathExtension.dropFirst())
+    if #available(iOS 14, *) {
+      return UTType(filenameExtension: filenameExtension)?.preferredMIMEType
+    }
+    if let uti = UTTypeCreatePreferredIdentifierForTag(
+      kUTTagClassFilenameExtension,
+      pathExtension as NSString, nil
+    )?.takeRetainedValue() {
+      if let mimetype = UTTypeCopyPreferredTagWithClass(uti, kUTTagClassMIMEType)?.takeRetainedValue() {
+        return mimetype as String
+      }
+    }
+    return nil
+  }
+
   // MARK: - Video
 
   // TODO: convert to async/await syntax once we drop support for iOS 12
@@ -180,17 +208,20 @@ internal struct MediaHandler {
       let duration = VideoUtils.readDurationFrom(url: videoUrlToReadDurationFrom)
 
       let asset = mediaInfo[.phAsset] as? PHAsset
+      let mimeType = getMimeType(from: ".\(targetUrl.pathExtension)")
       let fileName = asset?.value(forKey: "filename") as? String
       let fileSize = getFileSize(from: targetUrl)
-
-      let result: ImagePickerSingleResponse = .video(VideoInfo(assetId: asset?.localIdentifier,
-                                                               uri: targetUrl.absoluteString,
-                                                               width: dimensions.width,
-                                                               height: dimensions.height,
-                                                               fileName: fileName,
-                                                               fileSize: fileSize,
-                                                               duration: duration))
-      completion(.success(result))
+      let videoInfo = AssetInfo(assetId: asset?.localIdentifier,
+                                type: "video",
+                                uri: targetUrl.absoluteString,
+                                width: dimensions.width,
+                                height: dimensions.height,
+                                fileName: fileName,
+                                fileSize: fileSize,
+                                mimeType: mimeType,
+                                duration: duration)
+
+      completion(.success(ImagePickerResponse(assets: [videoInfo], canceled: false)))
     } catch let exception as Exception {
       return completion(.failure(exception))
     } catch {
@@ -215,6 +246,7 @@ internal struct MediaHandler {
         let transcodeFileType = AVFileType.mp4
         let transcodeFileExtension = ".mp4"
         let originalExtension = ".\(videoUrl.pathExtension)"
+        let mimeType = getMimeType(from: originalExtension)
 
         // We need to copy the result into a place that we control, because the picker
         // can remove the original file during conversion.
@@ -232,7 +264,7 @@ internal struct MediaHandler {
             return completion(index, .failure(exception))
           case .success(let targetUrl):
             let fileName = itemProvider.suggestedName.map { $0 + transcodeFileExtension }
-            let videoResult = buildVideoResult(for: targetUrl, withName: fileName, assetId: selectedVideo.assetIdentifier)
+            let videoResult = buildVideoResult(for: targetUrl, withName: fileName, mimeType: mimeType, assetId: selectedVideo.assetIdentifier)
             return completion(index, videoResult)
           }
         }
@@ -246,31 +278,49 @@ internal struct MediaHandler {
 
   // MARK: - utils
 
+  private func replaceFileExtension(fileName: String, targetExtension: String) -> String {
+    if !fileName.lowercased().hasSuffix(targetExtension.lowercased()) {
+      return deleteFileExtension(fileName: fileName) + targetExtension
+    }
+    return fileName
+  }
+
+  private func deleteFileExtension(fileName: String) -> String {
+    var components = fileName.components(separatedBy: ".")
+    guard components.count > 1 else {
+      return fileName
+    }
+    components.removeLast()
+    return components.joined(separator: ".")
+  }
+
   private func generateUrl(withFileExtension: String) throws -> URL {
     guard let fileSystem = self.fileSystem else {
       throw FileSystemModuleNotFoundException()
     }
     let directory =  fileSystem.cachesDirectory.appending(
       fileSystem.cachesDirectory.hasSuffix("/") ? "" : "/" + "ImagePicker"
-    );
+    )
     let path = fileSystem.generatePath(inDirectory: directory, withExtension: withFileExtension)
     let url = URL(fileURLWithPath: path)
     return url
   }
 
-  private func buildVideoResult(for videoUrl: URL, withName fileName: String?, assetId: String?) -> SelectedMediaResult {
+  private func buildVideoResult(for videoUrl: URL, withName fileName: String?, mimeType: String?, assetId: String?) -> SelectedMediaResult {
     guard let size = VideoUtils.readSizeFrom(url: videoUrl) else {
       return .failure(FailedToReadVideoSizeException())
     }
     let duration = VideoUtils.readDurationFrom(url: videoUrl)
     let fileSize = getFileSize(from: videoUrl)
 
-    let result = VideoInfo(assetId: assetId,
+    let result = AssetInfo(assetId: assetId,
+                           type: "video",
                            uri: videoUrl.absoluteString,
                            width: size.width,
                            height: size.height,
                            fileName: fileName,
                            fileSize: fileSize,
+                           mimeType: mimeType,
                            duration: duration)
     return .success(result)
   }
@@ -332,7 +382,7 @@ private struct ImageUtils {
       return (data, ".png")
 
     case .some(let s) where s.contains("ext=BMP"):
-      if options.allowsEditing || options.quality != nil {
+      if options.allowsEditing {
         // switch to png if editing
         let data = image.pngData()
         return (data, ".png")
@@ -340,12 +390,17 @@ private struct ImageUtils {
       return (nil, ".bmp")
 
     case .some(let s) where s.contains("ext=GIF"):
+      var rawData: Data?
+      if let imgUrl = mediaInfo[.imageURL] as? URL {
+         rawData = try? Data(contentsOf: imgUrl)
+      }
+      let inputData = rawData ?? image.jpegData(compressionQuality: compressionQuality)
       let metadata = mediaInfo[.mediaMetadata] as? [String: Any]
-      
-      let gifData = try getGifDataFrom(image: image,
+      let cropRect = options.allowsEditing ? mediaInfo[.cropRect] as? CGRect : nil
+      let gifData = try processGifData(inputData: inputData,
                                        compressionQuality: options.quality,
-                                       initialMetadata: metadata)
-
+                                       initialMetadata: metadata,
+                                       cropRect: cropRect)
       return (gifData, ".gif")
     default:
       let data = image.jpegData(compressionQuality: compressionQuality)
@@ -356,6 +411,7 @@ private struct ImageUtils {
   @available(iOS 14, *)
   static func readDataAndFileExtension(
     image: UIImage,
+    rawData: Data,
     itemProvider: NSItemProvider,
     options: ImagePickerOptions
   ) throws -> (imageData: Data?, fileExtension: String) {
@@ -363,11 +419,18 @@ private struct ImageUtils {
     let preferredFormat = itemProvider.registeredTypeIdentifiers.first
 
     switch preferredFormat {
+    case UTType.bmp.identifier:
+      if options.allowsEditing {
+        // switch to png if editing
+        let data = image.pngData()
+        return (data, ".png")
+      }
+      return (rawData, ".bmp")
     case UTType.png.identifier:
       let data = image.pngData()
       return (data, ".png")
     case UTType.gif.identifier:
-      let gifData = try getGifDataFrom(image: image,
+      let gifData = try processGifData(inputData: rawData,
                                        compressionQuality: options.quality,
                                        initialMetadata: nil)
       return (gifData, ".gif")
@@ -462,7 +525,7 @@ private struct ImageUtils {
 
     let options = PHContentEditingInputRequestOptions()
     options.isNetworkAccessAllowed = true
-    asset.requestContentEditingInput(with: options) { input, info in
+    asset.requestContentEditingInput(with: options) { input, _ in
       guard let imageUrl = input?.fullSizeImageURL,
             let properties = CIImage(contentsOf: imageUrl)?.properties
       else {
@@ -504,37 +567,54 @@ private struct ImageUtils {
     return exif
   }
 
-  static func getGifDataFrom(image: UIImage,
-                             compressionQuality quality: Double?,
-                             initialMetadata: [String: Any]?) throws -> Data? {
-    guard let data = image.jpegData(compressionQuality: quality ?? DEFAULT_QUALITY) else {
-      throw FailedToReadImageDataException()
+  static func processGifData(
+    inputData: Data?,
+    compressionQuality: Double?,
+    initialMetadata: [String: Any]?,
+    cropRect: CGRect? = nil
+  ) throws -> Data? {
+    let quality = compressionQuality ?? MAXIMUM_QUALITY
+    // for uncropped, maximum quality image we can just pass through the raw data
+    if cropRect == nil && quality >= MAXIMUM_QUALITY {
+      return inputData
     }
 
+    guard let sourceData = inputData,
+          let imageSource = CGImageSourceCreateWithData(sourceData as CFData, nil)
+    else {
+      throw FailedToReadImageException()
+    }
+
+    let gifProperties = CGImageSourceCopyProperties(imageSource, nil) as? [String: Any]
+    let frameCount = CGImageSourceGetCount(imageSource)
+
     let destinationData = NSMutableData()
-    guard let imageDestination = CGImageDestinationCreateWithData(destinationData, kUTTypeGIF, 1, nil),
-          let cgImage = image.cgImage
+    guard let imageDestination = CGImageDestinationCreateWithData(destinationData, kUTTypeGIF, frameCount, nil)
     else {
       throw FailedToCreateGifException()
     }
 
-    var metadata: [String: Any] = initialMetadata ?? [:]
-    if initialMetadata == nil,
-       let cgImageSource = CGImageSourceCreateWithData(data as CFData, nil),
-       let properties = CGImageSourceCopyPropertiesAtIndex(cgImageSource, 0, nil) as? [String: Any] {
-      metadata = properties
-    }
+    let gifMetadata = initialMetadata ?? gifProperties
+    CGImageDestinationSetProperties(imageDestination, gifMetadata as CFDictionary?)
 
-    if quality != nil {
-      metadata[kCGImageDestinationLossyCompressionQuality as String] = quality
+    for frameIndex in 0 ..< frameCount {
+      guard var cgImage = CGImageSourceCreateImageAtIndex(imageSource, frameIndex, nil),
+            var frameProperties = CGImageSourceCopyPropertiesAtIndex(imageSource, frameIndex, nil) as? [String: Any]
+      else {
+        throw FailedToCreateGifException()
+      }
+      if cropRect != nil {
+        cgImage = cgImage.cropping(to: cropRect!)!
+      }
+      if quality != nil {
+        frameProperties[kCGImageDestinationLossyCompressionQuality as String] = quality
+      }
+      CGImageDestinationAddImage(imageDestination, cgImage, frameProperties as CFDictionary)
     }
 
-    CGImageDestinationAddImage(imageDestination, cgImage, metadata as CFDictionary)
-
     if !CGImageDestinationFinalize(imageDestination) {
       throw FailedToExportGifException()
     }
-
     return destinationData as Data
   }
 }
@@ -560,8 +640,12 @@ private struct VideoUtils {
 
   static func readSizeFrom(url: URL) -> CGSize? {
     let asset = AVURLAsset(url: url)
-    let size: CGSize? = asset.tracks(withMediaType: .video).first?.naturalSize
-    return size
+    guard let assetTrack = asset.tracks(withMediaType: .video).first else {
+      return nil
+    }
+    // The video could be rotated and the resulting transform can result in a negative width/height.
+    let size = assetTrack.naturalSize.applying(assetTrack.preferredTransform)
+    return CGSize(width: abs(size.width), height: abs(size.height))
   }
 
   static func readVideoUrlFrom(mediaInfo: MediaInfo) -> URL? {
diff --git a/node_modules/expo-image-picker/ios/UIImage+fixOrientation.swift b/node_modules/expo-image-picker/ios/UIImage+fixOrientation.swift
index bce72e2..0f20760 100644
--- a/node_modules/expo-image-picker/ios/UIImage+fixOrientation.swift
+++ b/node_modules/expo-image-picker/ios/UIImage+fixOrientation.swift
@@ -15,7 +15,7 @@ extension UIImage {
     case .down,
          .downMirrored:
       transform = transform
-        .translatedBy(x: self.size.width, y: self.size.width)
+        .translatedBy(x: self.size.width, y: self.size.height)
         .rotated(by: .pi)
     case .left,
          .leftMirrored:
diff --git a/node_modules/expo-image-picker/ios/UIImagePickerControllerExtentsion.swift b/node_modules/expo-image-picker/ios/UIImagePickerControllerExtentsion.swift
new file mode 100644
index 0000000..865a59d
--- /dev/null
+++ b/node_modules/expo-image-picker/ios/UIImagePickerControllerExtentsion.swift
@@ -0,0 +1,57 @@
+// Copyright 2016-present 650 Industries. All rights reserved.
+
+extension UIImagePickerController {
+  func fixCannotMoveEditingBox() {
+    if let cropView = cropView,
+      let scrollView = scrollView,
+      scrollView.contentOffset.y == 0 {
+      let top = cropView.frame.minY + self.view.safeAreaInsets.top
+      let bottom = scrollView.frame.height - cropView.frame.height - top
+      scrollView.contentInset = UIEdgeInsets(top: top, left: 0, bottom: bottom, right: 0)
+
+      var offset: CGFloat = 0
+      if scrollView.contentSize.height > scrollView.contentSize.width {
+        offset = 0.5 * (scrollView.contentSize.height - scrollView.contentSize.width)
+      }
+      scrollView.contentOffset = CGPoint(x: 0, y: -top + offset)
+    }
+
+    DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) { [weak self] in
+      self?.fixCannotMoveEditingBox()
+    }
+  }
+
+  var cropView: UIView? {
+    return findCropView(from: self.view)
+  }
+
+  var scrollView: UIScrollView? {
+    return findScrollView(from: self.view)
+  }
+
+  func findCropView(from view: UIView) -> UIView? {
+    let width = UIScreen.main.bounds.width
+    let size = view.bounds.size
+    if width == size.height, width == size.height {
+      return view
+    }
+    for view in view.subviews {
+      if let cropView = findCropView(from: view) {
+        return cropView
+      }
+    }
+    return nil
+  }
+
+  func findScrollView(from view: UIView) -> UIScrollView? {
+    if let scrollView = view as? UIScrollView {
+      return scrollView
+    }
+    for view in view.subviews {
+      if let scrollView = findScrollView(from: view) {
+        return scrollView
+      }
+    }
+    return nil
+  }
+}
diff --git a/node_modules/expo-image-picker/plugin/build/withImagePicker.d.ts b/node_modules/expo-image-picker/plugin/build/withImagePicker.d.ts
index 42b5655..31d5b37 100644
--- a/node_modules/expo-image-picker/plugin/build/withImagePicker.d.ts
+++ b/node_modules/expo-image-picker/plugin/build/withImagePicker.d.ts
@@ -1,5 +1,5 @@
 import { ConfigPlugin, InfoPlist } from '@expo/config-plugins';
-declare type Props = {
+type Props = {
     photosPermission?: string | false;
     cameraPermission?: string | false;
     microphonePermission?: string | false;
diff --git a/node_modules/expo-image-picker/src/ExponentImagePicker.ts b/node_modules/expo-image-picker/src/ExponentImagePicker.ts
index 04c2c4c..8f7d36b 100644
--- a/node_modules/expo-image-picker/src/ExponentImagePicker.ts
+++ b/node_modules/expo-image-picker/src/ExponentImagePicker.ts
@@ -1,2 +1,2 @@
-import { NativeModulesProxy } from 'expo-modules-core';
-export default NativeModulesProxy.ExponentImagePicker;
+import { requireNativeModule } from 'expo-modules-core';
+export default requireNativeModule('ExponentImagePicker');
diff --git a/node_modules/expo-image-picker/src/ExponentImagePicker.web.ts b/node_modules/expo-image-picker/src/ExponentImagePicker.web.ts
index 133e2e2..8b2480b 100644
--- a/node_modules/expo-image-picker/src/ExponentImagePicker.web.ts
+++ b/node_modules/expo-image-picker/src/ExponentImagePicker.web.ts
@@ -1,10 +1,7 @@
 import { PermissionResponse, PermissionStatus, Platform } from 'expo-modules-core';
-import { v4 } from 'uuid';
 
 import {
-  ExpandImagePickerResult,
-  ImageInfo,
-  ImagePickerMultipleResult,
+  ImagePickerAsset,
   ImagePickerResult,
   MediaTypeOptions,
   OpenFileBrowserOptions,
@@ -25,10 +22,10 @@ export default {
     mediaTypes = MediaTypeOptions.Images,
     allowsMultipleSelection = false,
     base64 = false,
-  }): Promise<ImagePickerResult | ImagePickerMultipleResult> {
+  }): Promise<ImagePickerResult> {
     // SSR guard
     if (!Platform.isDOMAvailable) {
-      return { cancelled: true };
+      return { canceled: true, assets: null };
     }
     return await openFileBrowserAsync({
       mediaTypes,
@@ -41,10 +38,10 @@ export default {
     mediaTypes = MediaTypeOptions.Images,
     allowsMultipleSelection = false,
     base64 = false,
-  }): Promise<ImagePickerResult | ImagePickerMultipleResult> {
+  }): Promise<ImagePickerResult> {
     // SSR guard
     if (!Platform.isDOMAvailable) {
-      return { cancelled: true };
+      return { canceled: true, assets: null };
     }
     return await openFileBrowserAsync({
       mediaTypes,
@@ -85,19 +82,19 @@ function permissionGrantedResponse(): PermissionResponse {
   };
 }
 
-function openFileBrowserAsync<T extends OpenFileBrowserOptions>({
+function openFileBrowserAsync({
   mediaTypes,
   capture = false,
   allowsMultipleSelection = false,
   base64,
-}: T): Promise<ExpandImagePickerResult<T>> {
+}: OpenFileBrowserOptions): Promise<ImagePickerResult> {
   const mediaTypeFormat = MediaTypeInput[mediaTypes];
 
   const input = document.createElement('input');
   input.style.display = 'none';
   input.setAttribute('type', 'file');
   input.setAttribute('accept', mediaTypeFormat);
-  input.setAttribute('id', v4());
+  input.setAttribute('id', String(Math.random()));
   if (allowsMultipleSelection) {
     input.setAttribute('multiple', 'multiple');
   }
@@ -106,23 +103,17 @@ function openFileBrowserAsync<T extends OpenFileBrowserOptions>({
   }
   document.body.appendChild(input);
 
-  return new Promise((resolve, reject) => {
+  return new Promise((resolve) => {
     input.addEventListener('change', async () => {
       if (input.files) {
-        if (!allowsMultipleSelection) {
-          const img: ImageInfo = await readFile(input.files[0], { base64 });
-          resolve({
-            ...img,
-          } as ExpandImagePickerResult<T>);
-        } else {
-          const imgs: ImageInfo[] = await Promise.all(
-            Array.from(input.files).map((file) => readFile(file, { base64 }))
-          );
-          resolve({
-            cancelled: false,
-            selected: imgs,
-          } as ExpandImagePickerResult<T>);
-        }
+        const files = allowsMultipleSelection ? input.files : [input.files[0]];
+        const assets: ImagePickerAsset[] = await Promise.all(
+          Array.from(files).map((file) => readFile(file, { base64 }))
+        );
+
+        resolve({ canceled: false, assets });
+      } else {
+        resolve({ canceled: true, assets: null });
       }
       document.body.removeChild(input);
     });
@@ -132,7 +123,7 @@ function openFileBrowserAsync<T extends OpenFileBrowserOptions>({
   });
 }
 
-function readFile(targetFile: Blob, options: { base64: boolean }): Promise<ImageInfo> {
+function readFile(targetFile: File, options: { base64: boolean }): Promise<ImagePickerAsset> {
   return new Promise((resolve, reject) => {
     const reader = new FileReader();
     reader.onerror = () => {
@@ -140,23 +131,19 @@ function readFile(targetFile: Blob, options: { base64: boolean }): Promise<Image
     };
     reader.onload = ({ target }) => {
       const uri = (target as any).result;
-      const returnRaw = () =>
-        resolve({
-          uri,
-          width: 0,
-          height: 0,
-          cancelled: false,
-        });
+      const returnRaw = () => resolve({ uri, width: 0, height: 0 });
 
       if (typeof uri === 'string') {
         const image = new Image();
         image.src = uri;
-        image.onload = () =>
+
+        image.onload = () => {
           resolve({
             uri,
             width: image.naturalWidth ?? image.width,
             height: image.naturalHeight ?? image.height,
-            cancelled: false,
+            mimeType: targetFile.type,
+            fileName: targetFile.name,
             // The blob's result cannot be directly decoded as Base64 without
             // first removing the Data-URL declaration preceding the
             // Base64-encoded data. To retrieve only the Base64 encoded string,
@@ -164,6 +151,7 @@ function readFile(targetFile: Blob, options: { base64: boolean }): Promise<Image
             // https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
             ...(options.base64 && { base64: uri.substr(uri.indexOf(',') + 1) }),
           });
+        };
         image.onerror = () => returnRaw();
       } else {
         returnRaw();
diff --git a/node_modules/expo-image-picker/src/ImagePicker.ts b/node_modules/expo-image-picker/src/ImagePicker.ts
index 4447b57..bce9914 100644
--- a/node_modules/expo-image-picker/src/ImagePicker.ts
+++ b/node_modules/expo-image-picker/src/ImagePicker.ts
@@ -11,20 +11,10 @@ import {
 import ExponentImagePicker from './ExponentImagePicker';
 import {
   CameraPermissionResponse,
-  CameraRollPermissionResponse,
   MediaLibraryPermissionResponse,
   ImagePickerResult,
   ImagePickerErrorResult,
-  MediaTypeOptions,
   ImagePickerOptions,
-  VideoExportPreset,
-  ExpandImagePickerResult,
-  ImageInfo,
-  ImagePickerMultipleResult,
-  ImagePickerCancelledResult,
-  OpenFileBrowserOptions,
-  UIImagePickerControllerQualityType,
-  UIImagePickerPresentationStyle,
 } from './ImagePicker.types';
 
 function validateOptions(options: ImagePickerOptions) {
@@ -61,22 +51,12 @@ function validateOptions(options: ImagePickerOptions) {
 // @needsAudit
 /**
  * Checks user's permissions for accessing camera.
- * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerarollpermissionresponse).
+ * @return A promise that fulfills with an object of type [CameraPermissionResponse](#camerapermissionresponse).
  */
 export async function getCameraPermissionsAsync(): Promise<CameraPermissionResponse> {
   return ExponentImagePicker.getCameraPermissionsAsync();
 }
 
-/**
- * @deprecated Use `getMediaLibraryPermissionsAsync()` instead.
- */
-export async function getCameraRollPermissionsAsync(): Promise<MediaLibraryPermissionResponse> {
-  console.warn(
-    'ImagePicker.getCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.getMediaLibraryPermissionsAsync()'
-  );
-  return getMediaLibraryPermissionsAsync();
-}
-
 // @needsAudit
 /**
  * Checks user's permissions for accessing photos.
@@ -99,16 +79,6 @@ export async function requestCameraPermissionsAsync(): Promise<CameraPermissionR
   return ExponentImagePicker.requestCameraPermissionsAsync();
 }
 
-/**
- * @deprecated Use `requestMediaLibraryPermissionsAsync()` instead.
- */
-export async function requestCameraRollPermissionsAsync(): Promise<MediaLibraryPermissionResponse> {
-  console.warn(
-    'ImagePicker.requestCameraRollPermissionsAsync() is deprecated in favour of ImagePicker.requestMediaLibraryPermissionsAsync()'
-  );
-  return requestMediaLibraryPermissionsAsync();
-}
-
 // @needsAudit
 /**
  * Asks the user to grant permissions for accessing user's photo. This method does nothing on web.
@@ -189,10 +159,9 @@ export async function getPendingResultAsync(): Promise<
  * intended. The `cancelled` event will not be returned in the browser due to platform restrictions
  * and inconsistencies across browsers.
  * @param options An `ImagePickerOptions` object.
- * @return If the user cancelled the action, the method returns `{ cancelled: true }`. Otherwise,
- * this method returns information about the selected media item. When the chosen item is an image,
- * this method returns `{ cancelled: false, type: 'image', uri, width, height, exif, base64 }`;
- * when the item is a video, this method returns `{ cancelled: false, type: 'video', uri, width, height, duration }`.
+ * @return A promise that resolves to an object with `canceled` and `assets` fields.
+ * When the user canceled the action the `assets` is always `null`, otherwise it's an array of
+ * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).
  */
 export async function launchCameraAsync(
   options: ImagePickerOptions = {}
@@ -206,26 +175,27 @@ export async function launchCameraAsync(
 // @needsAudit
 /**
  * Display the system UI for choosing an image or a video from the phone's library.
- * Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be called
+ * Requires `Permissions.MEDIA_LIBRARY` on iOS 10 only. On mobile web, this must be     called
  * immediately in a user interaction like a button press, otherwise the browser will block the
  * request without a warning.
- * **Animated GIFs support** If the selected image is an animated GIF, the result image will be an
- * animated GIF too if and only if `quality` is set to `undefined` and `allowsEditing` is set to `false`.
+ *
+ * **Animated GIFs support:** On Android, if the selected image is an animated GIF, the result image will be an
+ * animated GIF too if and only if `quality` is explicitly set to `1.0` and `allowsEditing` is set to `false`.
  * Otherwise compression and/or cropper will pick the first frame of the GIF and return it as the
- * result (on Android the result will be a PNG, on iOS ‚Äî GIF).
+ * result (on Android the result will be a PNG). On iOS, both quality and cropping are supported.
+ *
  * > **Notes for Web:** The system UI can only be shown after user activation (e.g. a `Button` press).
  * Therefore, calling `launchImageLibraryAsync` in `componentDidMount`, for example, will **not**
  * work as intended. The `cancelled` event will not be returned in the browser due to platform
  * restrictions and inconsistencies across browsers.
  * @param options An object extended by [`ImagePickerOptions`](#imagepickeroptions).
- * @return If the user cancelled the action, the method returns `{ cancelled: true }`. Otherwise,
- * this method returns information about the selected media item. When the chosen item is an image,
- * this method returns `{ cancelled: false, type: 'image', uri, width, height, exif, base64 }`;
- * when the item is a video, this method returns `{ cancelled: false, type: 'video', uri, width, height, duration }`.
+ * @return A promise that resolves to an object with `canceled` and `assets` fields.
+ * When the user canceled the action the `assets` is always `null`, otherwise it's an array of
+ * the selected media assets which have a form of [`ImagePickerAsset`](#imagepickerasset).
  */
-export async function launchImageLibraryAsync<T extends ImagePickerOptions>(
-  options?: T
-): Promise<ExpandImagePickerResult<T>> {
+export async function launchImageLibraryAsync(
+  options?: ImagePickerOptions
+): Promise<ImagePickerResult> {
   if (!ExponentImagePicker.launchImageLibraryAsync) {
     throw new UnavailabilityError('ImagePicker', 'launchImageLibraryAsync');
   }
@@ -239,24 +209,6 @@ export async function launchImageLibraryAsync<T extends ImagePickerOptions>(
   return await ExponentImagePicker.launchImageLibraryAsync(options ?? {});
 }
 
-export {
-  MediaTypeOptions,
-  ImagePickerOptions,
-  ImagePickerResult,
-  ImagePickerErrorResult,
-  VideoExportPreset,
-  CameraPermissionResponse,
-  CameraRollPermissionResponse,
-  MediaLibraryPermissionResponse,
-  PermissionStatus,
-  PermissionExpiration,
-  PermissionHookOptions,
-  PermissionResponse,
-  ImageInfo,
-  ImagePickerMultipleResult,
-  ImagePickerCancelledResult,
-  OpenFileBrowserOptions,
-  ExpandImagePickerResult,
-  UIImagePickerControllerQualityType,
-  UIImagePickerPresentationStyle,
-};
+export * from './ImagePicker.types';
+
+export { PermissionStatus, PermissionExpiration, PermissionHookOptions, PermissionResponse };
diff --git a/node_modules/expo-image-picker/src/ImagePicker.types.ts b/node_modules/expo-image-picker/src/ImagePicker.types.ts
index 826ec22..ac7a5ee 100644
--- a/node_modules/expo-image-picker/src/ImagePicker.types.ts
+++ b/node_modules/expo-image-picker/src/ImagePicker.types.ts
@@ -8,7 +8,7 @@ export type CameraPermissionResponse = PermissionResponse;
 
 // @needsAudit
 /**
- * Extends `PermissionResponse` type exported by `expo-modules-core` and contains additional iOS-specific field.
+ * Extends `PermissionResponse` type exported by `expo-modules-core`, containing additional iOS-specific field.
  */
 export type MediaLibraryPermissionResponse = PermissionResponse & {
   /**
@@ -17,13 +17,6 @@ export type MediaLibraryPermissionResponse = PermissionResponse & {
   accessPrivileges?: 'all' | 'limited' | 'none';
 };
 
-// @needsAudit
-/**
- * An alias for the `MediaLibraryPermissionResponse` object.
- * @deprecated Use `ImagePicker.MediaLibraryPermissionResponse` instead.
- */
-export type CameraRollPermissionResponse = MediaLibraryPermissionResponse;
-
 // @needsAudit
 export enum MediaTypeOptions {
   /**
@@ -179,42 +172,49 @@ export enum UIImagePickerPresentationStyle {
    * @platform ios 13+
    */
   AUTOMATIC = 'automatic',
+}
+
+/**
+ * Picker preferred asset representation mode. Its values are directly mapped to the [`PHPickerConfigurationAssetRepresentationMode`](https://developer.apple.com/documentation/photokit/phpickerconfigurationassetrepresentationmode).
+ *
+ * @platform ios
+ */
+export enum UIImagePickerPreferredAssetRepresentationMode {
   /**
-   * @deprecated Use `UIImagePickerPresentationStyle.FULL_SCREEN` instead.
-   */
-  FullScreen = 'fullScreen',
-  /**
-   * @deprecated Use `UIImagePickerPresentationStyle.PAGE_SHEET` instead.
-   */
-  PageSheet = 'pageSheet',
-  /**
-   * @deprecated Use `UIImagePickerPresentationStyle.FORM_SHEET` instead.
-   */
-  FormSheet = 'formSheet',
-  /**
-   * @deprecated Use `UIImagePickerPresentationStyle.CURRENT_CONTEXT` instead.
+   * A mode that indicates that the system chooses the appropriate asset representation.
    */
-  CurrentContext = 'currentContext',
+  Automatic = 'automatic',
   /**
-   * @deprecated Use `UIImagePickerPresentationStyle.OVER_FULL_SCREEN` instead.
+   * A mode that uses the most compatible asset representation.
    */
-  OverFullScreen = 'overFullScreen',
+  Compatible = 'compatible',
   /**
-   * @deprecated Use `UIImagePickerPresentationStyle.OVER_CURRENT_CONTEXT` instead.
+   * A mode that uses the current representation to avoid transcoding, if possible.
    */
-  OverCurrentContext = 'overCurrentContext',
+  Current = 'current',
+}
+
+export enum CameraType {
   /**
-   * @deprecated Use `UIImagePickerPresentationStyle.POPOVER` instead.
+   * Back/rear camera.
    */
-  Popover = 'popover',
+  back = 'back',
   /**
-   * @deprecated Use `UIImagePickerPresentationStyle.AUTOMATIC` instead.
+   * Front camera
    */
-  Automatic = 'automatic',
+  front = 'front',
 }
 
-// @needsAudit
-export type ImageInfo = {
+/**
+ * @hidden
+ * @deprecated Use `ImagePickerAsset` instead
+ */
+export type ImageInfo = ImagePickerAsset;
+
+/**
+ * Represents an asset (image or video) returned by the image picker or camera.
+ */
+export type ImagePickerAsset = {
   /**
    * URI to the local image or video file (usable as the source of an `Image` element, in the case of
    * an image) and `width` and `height` specify the dimensions of the media.
@@ -247,13 +247,11 @@ export type ImageInfo = {
    * Preferred filename to use when saving this item. This might be `null` when the name is unavailable
    * or user gave limited permission to access the media library.
    *
-   * @platform ios
    */
   fileName?: string | null;
   /**
    * File size of the picked image or video, in bytes.
    *
-   * @platform ios
    */
   fileSize?: number;
   /**
@@ -261,28 +259,27 @@ export type ImageInfo = {
    * image's EXIF data. The names of this object's properties are EXIF tags and the values are the
    * respective EXIF values for those tags.
    */
-  exif?: Record<string, any>;
+  exif?: Record<string, any> | null;
   /**
-   * Included if the `base64` option is truthy, and is a Base64-encoded string of the selected
-   * image's JPEG data. If you prepend this with `'data:image/jpeg;base64,'` to create a data URI,
+   * When the `base64` option is truthy, it is a Base64-encoded string of the selected image's JPEG data, otherwise `null`.
+   * If you prepend this with `'data:image/jpeg;base64,'` to create a data URI,
    * you can use it as the source of an `Image` element; for example:
    * ```ts
    * <Image
-   *   source={{ uri: 'data:image/jpeg;base64,' + launchCameraResult.base64 }}
+   *   source={{ uri: 'data:image/jpeg;base64,' + asset.base64 }}
    *   style={{ width: 200, height: 200 }}
    * />
    * ```
    */
-  base64?: string;
+  base64?: string | null;
   /**
-   * Length of the video in milliseconds.
+   * Length of the video in milliseconds or `null` if the asset is not a video.
    */
-  duration?: number;
+  duration?: number | null;
   /**
-   * Boolean flag which shows if request was cancelled. If asset data have been returned this should
-   * always be `false`.
+   * The MIME type of the selected asset or `null` if could not be determined.
    */
-  cancelled: boolean;
+  mimeType?: string;
 };
 
 // @needsAudit
@@ -303,17 +300,49 @@ export type ImagePickerErrorResult = {
 
 // @needsAudit
 /**
- * An object returned when the pick action has been cancelled by the user.
+ * Type representing successful and canceled pick result.
  */
-export type ImagePickerCancelledResult = { cancelled: true };
+export type ImagePickerResult = ImagePickerSuccessResult | ImagePickerCanceledResult;
 
-// @needsAudit
-export type ImagePickerResult = ImagePickerCancelledResult | ImageInfo;
+/**
+ * Type representing successful pick result.
+ */
+export type ImagePickerSuccessResult = {
+  /**
+   * Boolean flag set to `false` showing that the request was successful.
+   */
+  canceled: false;
+  /**
+   * An array of picked assets.
+   */
+  assets: ImagePickerAsset[];
+};
 
-// @needsAudit @docsMissing
-export type ImagePickerMultipleResult =
-  | ImagePickerCancelledResult
-  | { cancelled: false; selected: ImageInfo[] };
+/**
+ * Type representing canceled pick result.
+ */
+export type ImagePickerCanceledResult = {
+  /**
+   * Boolean flag set to `true` showing that the request was canceled.
+   */
+  canceled: true;
+  /**
+   * `null` signifying that the request was canceled.
+   */
+  assets: null;
+};
+
+/**
+ * @hidden
+ * @deprecated Use `ImagePickerResult` instead.
+ */
+export type ImagePickerCancelledResult = ImagePickerCanceledResult;
+
+/**
+ * @hidden
+ * @deprecated `ImagePickerMultipleResult` has been deprecated in favor of `ImagePickerResult`.
+ */
+export type ImagePickerMultipleResult = ImagePickerResult;
 
 // @needsAudit
 export type ImagePickerOptions = {
@@ -321,8 +350,9 @@ export type ImagePickerOptions = {
    * Whether to show a UI to edit the image after it is picked. On Android the user can crop and
    * rotate the image and on iOS simply crop it.
    *
-   * > Cropping multiple images is not supported - this option is mutually exclusive with `allowsMultipleSelection`.
-   * > On iOS, this option is ignored if `allowsMultipleSelection` is enabled.
+   * > - Cropping multiple images is not supported - this option is mutually exclusive with `allowsMultipleSelection`.
+   * > - On iOS, this option is ignored if `allowsMultipleSelection` is enabled.
+   * > - On iOS cropping a `.bmp` image will convert it to `.png`.
    *
    * @default false
    * @platform ios
@@ -393,6 +423,7 @@ export type ImagePickerOptions = {
    * Setting the value to `0` sets the selection limit to the maximum that the system supports.
    *
    * @platform ios 14+
+   * @platform android
    * @default 0
    */
   selectionLimit?: number;
@@ -423,6 +454,22 @@ export type ImagePickerOptions = {
    * @platform ios
    */
   presentationStyle?: UIImagePickerPresentationStyle;
+  /**
+   * Selects the camera-facing type. The `CameraType` enum provides two options:
+   * `front` for the front-facing camera and `back` for the back-facing camera.
+   * - **On Android**, the behavior of this option may vary based on the camera app installed on the device.
+   * @default CameraType.back
+   * @platform ios
+   * @platform android
+   */
+  cameraType?: CameraType;
+  /**
+   * Choose [preferred asset representation mode](https://developer.apple.com/documentation/photokit/phpickerconfigurationassetrepresentationmode)
+   * to use when loading assets.
+   * @default ImagePicker.UIImagePickerPreferredAssetRepresentationMode.Automatic
+   * @platform ios 14+
+   */
+  preferredAssetRepresentationMode?: UIImagePickerPreferredAssetRepresentationMode;
 };
 
 // @needsAudit
@@ -445,10 +492,13 @@ export type OpenFileBrowserOptions = {
   base64: boolean;
 };
 
-// @needsAudit @docsMissing
+/**
+ * @hidden
+ * @deprecated Use `ImagePickerResult` or `OpenFileBrowserOptions` instead.
+ */
 export type ExpandImagePickerResult<T extends ImagePickerOptions | OpenFileBrowserOptions> =
   T extends {
     allowsMultipleSelection: true;
   }
-    ? ImagePickerMultipleResult
+    ? ImagePickerResult
     : ImagePickerResult;
diff --git a/node_modules/expo-image-picker/tsconfig.json b/node_modules/expo-image-picker/tsconfig.json
index dbf7492..a24ec0f 100644
--- a/node_modules/expo-image-picker/tsconfig.json
+++ b/node_modules/expo-image-picker/tsconfig.json
@@ -5,5 +5,5 @@
     "outDir": "./build"
   },
   "include": ["./src"],
-  "exclude": ["**/__mocks__/*", "**/__tests__/*", "**/__stories__/*"]
+  "exclude": ["**/__mocks__/*", "**/__tests__/*"]
 }
